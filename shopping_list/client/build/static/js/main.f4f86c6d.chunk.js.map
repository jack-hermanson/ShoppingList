{"version":3,"sources":["components/Heading/Heading.tsx","api/alerts.ts","api/items.ts","api/groups.ts","store.ts","components/ShoppingList/Group/GroupHeader.tsx","components/ShoppingList/Item/ItemLabel.tsx","components/ShoppingList/Item/Item.tsx","components/LoadingSpinner/LoadingSpinner.tsx","components/ShoppingList/Group/GroupBody.tsx","components/ShoppingList/Group/Group.tsx","components/ShoppingList/Group/Groups.tsx","components/FormInput/TextInput.tsx","components/FormInput/CheckboxInput.tsx","components/ShoppingList/Item/EditItemForm.tsx","components/AlertPanel/AlertPanel.tsx","components/ShoppingList/Item/utils.ts","components/ShoppingList/Item/EditItemModal.tsx","components/ShoppingList/Group/NewGroupForm.tsx","components/ShoppingList/Item/NewItemForm.tsx","utils.ts","components/Utils/StickyTop.tsx","components/ShoppingList/ShoppingList.tsx","App.tsx","index.tsx"],"names":["Heading","className","this","props","title","children","Component","alertsEndpoint","setAlert","text","color","a","axios","post","status","Promise","resolve","reject","setSuccessAlert","verbPastTense","noun","editItem","item","put","id","response","responseData","data","name","message","toggleItemCheck","itemId","checked","saveItem","Error","deleteItem","delete","getGroups","get","map","group","visible","store","createStore","groups","setGroups","action","state","payload","fetchGroups","thunk","actions","res","sort","first","second","addGroup","push","saveGroup","toggleGroup","items","setItems","fetchItems","newItem","groupId","startTime","Date","now","then","console","log","timeDif","focusItem","setFocusItem","alerts","originalTime","typedHooks","createTypedHooks","useStoreActions","useStoreState","useStoreDispatch","GroupHeader","CardHeader","onClick","notes","Button","size","ItemLabel","htmlFor","recurring","style","paddingBottom","Item","Input","type","onChange","event","target","cursor","LoadingSpinner","height","GroupBody","filter","some","_group","undefined","Table","striped","Group","Card","Groups","useEffect","React","memo","TextInput","Label","required","label","value","onKeyPress","placeholder","CheckboxInput","FormGroup","check","handleChange","EditItemForm","formName","editedItem","handleNameTextChange","key","handleFormSubmit","handleNotesTextChange","handleRecurringCheckChange","handleGroupCheckChange","AlertPanel","Alert","isOpen","toggle","setState","validateEditItemForm","valid","alertText","replace","length","isValid","defaultNewItem","EditItemModal","useState","validForm","setValidForm","alertPanelText","setAlertPanelText","showDeleteConfirm","setShowDeleteConfirm","removeFocusItem","setEditedItem","Form","Modal","centered","toggleModal","ModalHeader","ModalBody","renderAlert","newGroups","forEach","groupName","someGroup","ModalFooter","confirmDelete","NewGroupForm","newGroup","setNewGroup","handleSubmit","preventDefault","onSubmit","e","block","NewItemForm","setNewItem","fullGroup","scrollIntoView","document","getElementById","behavior","StickyTop","zIndex","ShoppingList","showActionsDropdown","setShowActionsDropdown","ButtonDropdown","DropdownToggle","caret","DropdownMenu","right","DropdownItem","ActionsDropdownMenu","Row","Col","sm","lg","CardBody","App","Container","ReactDOM","render","Fragment"],"mappings":"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","file":"static/js/main.f4f86c6d.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n\ninterface HeadingProps {\n    title: string;\n}\n\nexport default class Heading extends Component<HeadingProps, any> {\n    render() {\n        return (\n            <div>\n                <div className=\"page-title\">\n                    <h4 className=\"title-text\">{this.props.title}</h4>\n                    <div className=\"right\">\n                        {this.props.children}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import axios from \"axios\";\n\nconst alertsEndpoint = \"/api/alerts/\";\n\nexport const getAlerts = async () => {\n    const response = await axios.get(alertsEndpoint);\n    return response.data;\n}\n\nexport const setAlert = async (text: string, color: string): Promise<void> => {\n    const response = await axios.post(alertsEndpoint,\n        {\n            text: text,\n            color: color\n        });\n    if (response.status === 200) {\n        await Promise.resolve();\n    } else {\n        await Promise.reject();\n    }\n}\n\nexport const setSuccessAlert = async (verbPastTense: string, noun: string): Promise<void> => {\n    const text = `Successfully ${verbPastTense} ${noun}.`;\n    await setAlert(text, \"success\");\n}","import axios from \"axios\";\nimport ItemModel from \"../models/ItemModel\";\nimport {setAlert, setSuccessAlert} from \"./alerts\";\n\nexport const getItem = async (itemId: number): Promise<ItemModel> => {\n    const response = await axios.get(`/api/items/${itemId}`);\n    return {\n        id: response.data.id,\n        name: response.data.name,\n        notes: response.data.notes,\n        checked: response.data.checked,\n        groups: response.data.groups,\n        recurring: response.data.recurring\n    };\n}\n\nexport interface ItemRequestModel extends Omit<ItemModel, \"groups\"> {\n    groups: Array<number>;\n}\n\nexport const editItem = async (item: ItemRequestModel): Promise<void> => {\n    try {\n        const response = await axios.put(`/api/items/edit/${item.id}`, item);\n        const responseData: ItemModel = response.data;\n        await setSuccessAlert(\"updated\", `item \"${responseData.name}\"`);\n    } catch(error) {\n        await setAlert(`Error in editItem api call: ${error.message}`, \"danger\");\n    }\n}\n\nexport const toggleItemCheck = async (itemId: number, checked: boolean): Promise<void> => {\n    try {\n        await axios.put(`/api/items/toggle/${itemId}`, {\"checked\": checked});\n    } catch (error) {\n        await setAlert(`Error in toggleItemCheck api call: ${error.message}`, \"danger\");\n    }\n}\n\nexport const saveItem = async (item: ItemRequestModel): Promise<ItemModel> => {\n    try {\n        const response = await axios.post(\"/api/items/\", item);\n        const responseData: ItemModel = response.data;\n        await setSuccessAlert(\"added\", `item \"${responseData.name}\"`);\n        return responseData;\n    } catch (error) {\n        await setAlert(`Error in the saveItem api call: ${error.message}`, \"danger\");\n        throw new Error(error);\n    }\n}\n\nexport const deleteItem = async (itemId: number): Promise<void> => {\n    try {\n        await axios.delete(\"/api/items/\", {\n            data: {\n                id: itemId\n            }\n        });\n    } catch (error) {\n        await setAlert(`Error in the deleteItem api call: ${error.message}`, \"danger\");\n        throw new Error(error);\n    }\n}","import axios from \"axios\";\nimport GroupModel from \"../models/GroupModel\";\n\nexport const getGroups = async (): Promise<Array<GroupModel>> => {\n    const response = await axios.get(\"/api/groups/\");\n    return response.data.map((group: GroupModel) => {\n        return {...group, visible: true};\n    });\n};","import GroupModel from \"./models/GroupModel\";\nimport {action, Action, createStore, thunk, Thunk} from \"easy-peasy\";\nimport axios from \"axios\";\nimport {createTypedHooks} from \"easy-peasy\";\nimport AlertModel from \"./models/AlertModel\";\nimport ItemModel from \"./models/ItemModel\";\nimport {deleteItem, editItem, ItemRequestModel, saveItem, toggleItemCheck} from \"./api/items\";\nimport {getGroups} from \"./api/groups\";\n\ninterface StoreModel {\n    groups: GroupModel[];\n    setGroups: Action<StoreModel, GroupModel[]>;\n    fetchGroups: Thunk<StoreModel>;\n    addGroup: Action<StoreModel, GroupModel>;\n    saveGroup: Thunk<StoreModel, GroupModel>;\n    toggleGroup: Action<StoreModel, number>;\n\n    items: ItemModel[] | null;\n    setItems: Action<StoreModel, ItemModel[]>;\n    fetchItems: Thunk<StoreModel>;\n    editItem: Action<StoreModel, ItemModel>;\n    deleteItem: Thunk<StoreModel, number>;\n    saveItem: Thunk<StoreModel, ItemModel>;\n    toggleItemCheck: Action<StoreModel, {itemId: number, checked: boolean}>;\n    focusItem: ItemModel | null;\n    setFocusItem: Action<StoreModel, ItemModel | null>;\n\n    alerts: AlertModel[];\n}\n\nexport const store = createStore<StoreModel>({\n    groups: [],\n    setGroups: action((state, payload) => {\n        state.groups = payload;\n    }),\n    fetchGroups: thunk(async (actions) => {\n        const res = await getGroups();\n        actions.setGroups(res.sort((first: GroupModel, second: GroupModel) => {\n            if (first.name === \"Misc\") return 1;\n            if (second.name === \"Misc\") return -1;\n            return 0;\n        }));\n    }),\n    addGroup: action((state, payload) => {\n        state.groups.push(payload);\n    }),\n    saveGroup: thunk(async (actions, payload) => {\n        const res = await axios.post(\"/api/groups/\", payload);\n        actions.addGroup(res.data);\n        return res.data;\n    }),\n    toggleGroup: action((state, payload) => {\n        state.groups = state.groups.map(group => {\n            if (group.id !== payload) return group;\n            group.visible = !group.visible;\n            return group;\n        });\n    }),\n\n    items: null,\n    setItems: action((state, payload) => {\n        state.items = payload;\n    }),\n    fetchItems: thunk(async (actions) => {\n        const res = await axios.get(\"/api/items/\");\n        actions.setItems(res.data);\n    }),\n    editItem: action((state, payload) => {\n        const newItem: ItemRequestModel = {\n            ...payload,\n            groups: payload.groups.map(group => group.groupId)\n        };\n        state.items = state.items!.map((item: ItemModel) => {\n            if (item.id === newItem.id) {\n                return payload;\n            }\n            return item;\n        });\n        const startTime = Date.now();\n        editItem(newItem).then(() => {\n            console.log(`Item edited. Response time: ${timeDif(startTime)}s`);\n        });\n    }),\n    deleteItem: thunk(async (actions, itemId: number) => {\n        const startTime = Date.now();\n        await deleteItem(itemId);\n        console.log(`Item deleted. Response time: ${timeDif(startTime)}s`);\n        await actions.fetchItems();\n    }),\n    toggleItemCheck: action((state, payload) => {\n        const startTime = Date.now();\n        state.items = state.items!.map((item: ItemModel) => {\n            if (item.id === payload.itemId) {\n                item.checked = payload.checked;\n                return item;\n            }\n            return item;\n        });\n        toggleItemCheck(payload.itemId, payload.checked).then(() => {\n            console.log(`Item ${payload.checked ? \"\" : \"un\"}checked. Response time: ${timeDif(startTime)}s`);\n        });\n    }),\n    focusItem: null,\n    setFocusItem: action((state, payload) => {\n        state.focusItem = payload;\n    }),\n    saveItem: thunk(async (actions, payload) => {\n        const startTime = Date.now();\n        const newItem: ItemRequestModel = {\n            ...payload,\n            groups: payload.groups.map(group => group.groupId)\n        };\n        await saveItem(newItem);\n        await actions.fetchItems();\n        console.log(`New item added. Response time: ${timeDif(startTime)}s`);\n    }),\n\n    alerts: [],\n});\n\nconst timeDif = (originalTime: number) => {\n    return (Date.now() - originalTime) / 1000;\n}\n\nconst typedHooks = createTypedHooks<StoreModel>();\n\nexport const useStoreActions = typedHooks.useStoreActions;\nexport const useStoreDispatch = typedHooks.useStoreDispatch;\nexport const useStoreState = typedHooks.useStoreState;\n","import React from \"react\";\nimport {Button, CardHeader} from \"reactstrap\";\nimport {useStoreActions} from \"../../../store\";\n\ninterface Props {\n    name: string;\n    notes: string;\n    id: number;\n    visible: boolean | null;\n}\n\nexport const GroupHeader = (props: Props) => {\n    const toggleGroup = useStoreActions(actions => actions.toggleGroup);\n\n    return (\n        <CardHeader className=\"d-flex\">\n            <div className={`d-block mt-auto ${props.visible === false && \"text-muted\"}`} onClick={() => toggleGroup(props.id)}>\n                {props.name}\n                {props.notes !== \"\" &&\n                    <small className=\"d-block text-muted\">{props.notes}</small>\n                }\n            </div>\n            <div className=\"my-auto ml-auto\">\n                <Button size=\"sm\" color=\"info\">Complete</Button>\n            </div>\n        </CardHeader>\n    );\n}\n","import React from \"react\";\nimport {FiRepeat} from \"react-icons/fi\";\nimport ItemModel from \"../../../models/ItemModel\";\n\ninterface Props {\n    item: ItemModel;\n}\n\nexport const ItemLabel = ({item}: Props) => (\n    <label htmlFor={`checkbox_${item.id}`} className=\"custom-control-label\">\n        {item.name}\n        {item.recurring\n            ? <FiRepeat className=\"ml-1\" style={{paddingBottom: \"3px\"}}/>\n            : \"\"\n        }\n        {item.notes === \"\"\n            ? \"\"\n            : <small className=\"text-muted d-block\">{item.notes}</small>\n        }\n    </label>\n);","import React, {Fragment} from \"react\";\nimport ItemModel from \"../../../models/ItemModel\";\nimport {Input} from \"reactstrap\";\nimport {ItemLabel} from \"./ItemLabel\";\nimport {FaInfoCircle} from \"react-icons/fa\";\nimport {useStoreActions} from \"../../../store\";\n\ninterface Props {\n    item: ItemModel;\n}\n\nexport const Item = ({item}: Props) => {\n    const setFocusItem = useStoreActions(actions => actions.setFocusItem);\n    const toggleItemCheck = useStoreActions(actions => actions.toggleItemCheck);\n\n    return (\n        <Fragment>\n            <tr>\n                <td>\n                    <div className=\"custom-control custom-checkbox\">\n                        <Input\n                            id={`checkbox_${item.id}`}\n                            type=\"checkbox\"\n                            className=\"custom-control-input\"\n                            checked={item.checked}\n                            onChange={(event) => toggleItemCheck({\n                                itemId: item.id!,\n                                checked: event.target.checked\n                            })}\n                        />\n                        <ItemLabel item={item}/>\n                    </div>\n                </td>\n                <td>\n                    <FaInfoCircle\n                        style={{cursor: \"pointer\"}}\n                        onClick={() => setFocusItem(item)}\n                    />\n                </td>\n            </tr>\n        </Fragment>\n    )\n};\n\n","import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\nimport React from \"react\";\n\ninterface Props {\n    className?: string;\n}\n\nexport const LoadingSpinner = ({className}: Props) => (\n    <div className={className}>\n        <Loader\n            type=\"Bars\"\n            height={30}\n            color=\"#fff\"\n        />\n    </div>\n);\n","import React, {Component, Fragment} from \"react\";\nimport {Item} from \"../Item/Item\";\nimport {Table} from \"reactstrap\";\nimport ItemModel from \"../../../models/ItemModel\";\nimport GroupModel from \"../../../models/GroupModel\";\nimport {LoadingSpinner} from \"../../LoadingSpinner/LoadingSpinner\";\nimport {useStoreState} from \"../../../store\";\n\ninterface Props {\n    group: GroupModel;\n}\n\nexport const GroupBody = ({group}: Props) => {\n\n    const items = useStoreState(state => state.items?.filter(item => (\n        item.groups.some(_group => _group.groupId === group.id)\n    )));\n\n    return (\n        <Fragment>\n            {items !== undefined\n                ?\n                <Table className=\"mb-0 same-width\" striped>\n                    <tbody>\n                    {items.map((item: ItemModel) => (\n                        <Item item={item} key={item.id}/>\n                    ))}\n                    </tbody>\n                </Table>\n                :\n                <LoadingSpinner className=\"my-3\"/>\n            }\n        </Fragment>\n    );\n};\n","import React, {Fragment} from \"react\";\nimport GroupModel from \"../../../models/GroupModel\";\nimport {Card} from \"reactstrap\";\nimport {GroupHeader} from \"./GroupHeader\";\nimport {GroupBody} from \"./GroupBody\";\n\ninterface Props {\n    group: GroupModel;\n}\n\nexport const Group = ({group}: Props) => {\n    return (\n        <Fragment>\n            <Card className=\"space-between\">\n                <GroupHeader\n                    name={group.name!}\n                    notes={group.notes!}\n                    id={group.id!}\n                    visible={group.visible}\n                />\n                {group.visible !== false && (\n                    <GroupBody group={group}/>\n                )}\n            </Card>\n        </Fragment>\n    );\n};\n","import React, {Fragment, useEffect} from \"react\";\nimport {useStoreState, useStoreActions} from \"../../../store\";\nimport {Group} from \"./Group\";\n\nconst Groups = () => {\n\n    const groups = useStoreState(state => state.groups);\n    const fetchGroups = useStoreActions(actions => actions.fetchGroups);\n    const fetchItems = useStoreActions(actions => actions.fetchItems);\n\n    useEffect(  () => {\n        fetchGroups();\n        fetchItems();\n    }, [fetchGroups, fetchItems]);\n\n    return (\n        <Fragment>\n            {groups.map(group => (\n                <Group key={group.id} group={group} />\n            ))}\n        </Fragment>\n    );\n};\n\nexport default React.memo(Groups);","import React, {ChangeEvent, Component, KeyboardEvent, Fragment} from \"react\";\nimport {Input, Label} from \"reactstrap\";\n\ninterface Props {\n    label: string;\n    id: string;\n    type: \"text\" | \"textarea\";\n    value: string;\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    onKeyPress?: (event: KeyboardEvent<HTMLInputElement>) => void;\n    required?: boolean;\n    placeholder?: string;\n}\n\nexport default class TextInput extends Component<Props, any> {\n    render() {\n        return (\n            <Fragment>\n                <Label required={this.props.required} htmlFor={this.props.id}>{this.props.label}</Label>\n                <Input\n                    required={this.props.required}\n                    id={this.props.id}\n                    type={this.props.type}\n                    value={this.props.value}\n                    onChange={this.props.onChange}\n                    onKeyPress={this.props.onKeyPress}\n                    placeholder={this.props.placeholder}\n                />\n            </Fragment>\n        );\n    }\n}","import React, {ChangeEvent, Component} from \"react\";\nimport {FormGroup, Input, Label} from \"reactstrap\";\n\ninterface Props {\n    checked: boolean;\n    handleChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    label: string;\n}\n\nexport default class CheckboxInput extends Component<Props, any> {\n    render() {\n        return (\n            <FormGroup check>\n                <Label check>\n                    <Input\n                        checked={this.props.checked}\n                        onChange={this.props.handleChange}\n                        type=\"checkbox\"\n                    />\n                    {this.props.label}\n                </Label>\n            </FormGroup>\n        );\n    }\n}\n","import React, {ChangeEvent, Fragment, useState} from \"react\";\nimport {Label, FormGroup} from \"reactstrap\";\nimport TextInput from \"../../FormInput/TextInput\";\nimport CheckboxInput from \"../../FormInput/CheckboxInput\";\nimport ItemModel from \"../../../models/ItemModel\";\nimport {useStoreState} from \"../../../store\";\n\ninterface Props {\n    editedItem: ItemModel;\n    handleNameTextChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    handleNotesTextChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    handleRecurringCheckChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    handleGroupCheckChange: (event: ChangeEvent<HTMLInputElement>, groupId: number) => void;\n    handleFormSubmit: () => void;\n    formName: string;\n}\n\nexport const EditItemForm = (props: Props) => {\n\n    const groups = useStoreState(state => state.groups);\n\n    return (\n        <Fragment>\n            {renderNameInput()}\n            {renderNotesInput()}\n            {renderRecurringInput()}\n            {renderGroupsInput()}\n        </Fragment>\n    );\n\n    function renderNameInput() {\n        return (\n            <FormGroup>\n                <TextInput\n                    required\n                    label=\"Name\"\n                    id={`${props.formName}-name-input`}\n                    type=\"text\"\n                    value={props.editedItem.name}\n                    onChange={props.handleNameTextChange}\n                    placeholder=\"The name of the item...\"\n                    onKeyPress={(event) => {\n                        if (event.key === \"Enter\") {\n                            props.handleFormSubmit();\n                        }\n                    }}\n                />\n            </FormGroup>\n        );\n    }\n\n    function renderNotesInput() {\n        return (\n            <FormGroup>\n                <TextInput\n                    label=\"Notes\"\n                    id={`${props.formName}-notes-input`}\n                    type=\"textarea\"\n                    value={props.editedItem.notes}\n                    onChange={props.handleNotesTextChange}\n                    placeholder=\"Optional...\"\n                />\n            </FormGroup>\n        );\n    }\n\n    function renderRecurringInput() {\n        return (\n            <FormGroup>\n                <Label className=\"mb-0\">Recurring</Label>\n                <CheckboxInput\n                    checked={props.editedItem.recurring}\n                    handleChange={props.handleRecurringCheckChange}\n                    label=\"Item repeats\"\n                />\n            </FormGroup>\n        );\n    }\n\n    function renderGroupsInput() {\n        return (\n            <FormGroup>\n                <Label className=\"mb-0\">Groups</Label>\n                {groups.map(group => (\n                    <CheckboxInput\n                        key={group.id}\n                        checked={props.editedItem.groups.some(_group => _group.groupId === group.id)}\n                        handleChange={(event) => props.handleGroupCheckChange(event, group.id!)}\n                        label={group.name!}\n                    />\n                ))}\n            </FormGroup>\n        );\n    }\n}\n","import React, {Component} from \"react\";\nimport {Alert} from \"reactstrap\";\n\nexport interface AlertPanelProps {\n    color: \"info\" | \"success\" | \"primary\" | \"warning\" | \"danger\";\n    text: string;\n}\n\ninterface State {\n    visible: boolean;\n}\n\n\nexport default class AlertPanel extends Component<AlertPanelProps, State> {\n    constructor(props: AlertPanelProps) {\n        super(props);\n\n        this.state = {\n            visible: true\n        };\n    }\n\n    render() {\n        return (\n            <Alert\n                className=\"mt-3\"\n                color={this.props.color}\n                isOpen={this.state.visible}\n                toggle={() => this.setState({visible: false})}\n            >\n                {this.props.text}\n            </Alert>\n        );\n    }\n}","import ItemModel from \"../../../models/ItemModel\";\n\nexport function validateEditItemForm(editedItem: ItemModel): {\n    isValid: boolean,\n    alertText: string\n} {\n    let valid = true;\n    let alertText = \"\";\n\n    if (editedItem.name.replace(\" \", \"\").length < 2) {\n        valid = false;\n        alertText += \"The 'name' field must have at least 2 characters. \";\n    }\n    if (editedItem.groups.length < 1) {\n        valid = false;\n        alertText += \"At least one group is required. \";\n    }\n\n    return {isValid: valid, alertText};\n}\n\nexport const defaultNewItem: ItemModel = {\n    name: \"\",\n    notes: \"\",\n    groups: [],\n    checked: false,\n    recurring: false,\n    id: undefined\n}","import React, {Fragment, useEffect, useState} from \"react\";\nimport {Modal, ModalHeader, ModalBody, ModalFooter, Form, Button} from \"reactstrap\";\nimport {EditItemForm} from \"./EditItemForm\";\nimport {useStoreActions, useStoreState} from \"../../../store\";\nimport ItemModel from \"../../../models/ItemModel\";\nimport AlertPanel from \"../../AlertPanel/AlertPanel\";\nimport GroupModel from \"../../../models/GroupModel\";\nimport {defaultNewItem, validateEditItemForm} from \"./utils\";\nimport {useStore} from \"easy-peasy\";\n\nexport const EditItemModal = () => {\n\n    const focusItem = useStoreState(state => state.focusItem);\n    const setFocusItem = useStoreActions(actions => actions.setFocusItem);\n    const editItem = useStoreActions(actions => actions.editItem);\n    const deleteItem = useStoreActions(actions => actions.deleteItem);\n    const groups = useStoreState(state => state.groups);\n    const [validForm, setValidForm] = useState<boolean | null>(null);\n    const [alertPanelText, setAlertPanelText] = useState<string>(\"\");\n    const [showDeleteConfirm, setShowDeleteConfirm] = useState<boolean>(false);\n\n\n    const removeFocusItem = () => {\n        setFocusItem(null);\n    }\n\n    const [editedItem, setEditedItem] = useState<ItemModel>(focusItem!);\n\n    useEffect(() => {\n        setEditedItem(focusItem!);\n    }, [focusItem]);\n\n    return (\n        <Form>\n            {focusItem &&\n            <Fragment>\n                <Modal centered toggle={toggleModal} isOpen={true}>\n                    <ModalHeader toggle={toggleModal} className=\"d-flex\">\n                        {focusItem.name}\n                    </ModalHeader>\n                    <ModalBody>\n                        {renderAlert()}\n                        <EditItemForm\n                            formName=\"edit-item\"\n                            editedItem={editedItem}\n                            handleNameTextChange={event => setEditedItem({\n                                ...editedItem,\n                                name: event.target.value\n                            })}\n                            handleNotesTextChange={event => setEditedItem({\n                                ...editedItem,\n                                notes: event.target.value\n                            })}\n                            handleRecurringCheckChange={event => setEditedItem({\n                                ...editedItem,\n                                recurring: event.target.checked\n                            })}\n                            handleGroupCheckChange={(event, groupId) => {\n                                const newGroups: Array<{ groupId: number; groupName: string }> = [];\n                                groups.forEach((group: GroupModel) => {\n                                    if (group.id === groupId) {\n                                        if (event.target.checked) {\n                                            newGroups.push({groupId: group.id!, groupName: group.name!});\n                                        }\n                                    } else {\n                                        if (editedItem.groups.some(someGroup => someGroup.groupId === group.id)) {\n                                            newGroups.push({groupId: group.id!, groupName: group.name!});\n                                        }\n                                    }\n                                });\n                                setEditedItem({...editedItem, groups: newGroups});\n                            }}\n                            handleFormSubmit={handleFormSubmit}\n                        />\n                        {renderDeleteConfirmation()}\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button onClick={() => setShowDeleteConfirm(true)} className=\"mr-auto\" color=\"danger\">Delete</Button>\n                        <Button onClick={toggleModal} color=\"secondary\">Cancel</Button>\n                        <Button onClick={handleFormSubmit} type=\"submit\" color=\"info\">Submit</Button>\n                    </ModalFooter>\n                </Modal>\n            </Fragment>\n            }\n        </Form>\n    );\n\n    function toggleModal() {\n        removeFocusItem();\n        setValidForm(null);\n    }\n\n    function handleFormSubmit() {\n        const {isValid, alertText} = validateEditItemForm(editedItem);\n        setValidForm(isValid);\n        setAlertPanelText(alertText);\n\n        if (isValid) {\n            editItem(editedItem);\n            removeFocusItem();\n        }\n    }\n\n    function renderAlert() {\n        if (validForm === false) {\n            return (\n                <AlertPanel color=\"danger\" text={alertPanelText} />\n            );\n        }\n    }\n\n    function renderDeleteConfirmation() {\n        return (\n            <Modal isOpen={showDeleteConfirm} toggle={() => setShowDeleteConfirm(!showDeleteConfirm)}>\n                <ModalHeader toggle={() => setShowDeleteConfirm(!showDeleteConfirm)}>Confirm Item Deletion</ModalHeader>\n                <ModalBody>\n                    <p className=\"mb-0\">Are you sure you want to delete the item \"{focusItem?.name}\"?</p>\n                </ModalBody>\n                <ModalFooter>\n                    <Button onClick={() => setShowDeleteConfirm(false)} color=\"secondary\">No, cancel</Button>\n                    <Button onClick={confirmDelete} color=\"danger\">Yes, delete</Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n\n    function confirmDelete() {\n        deleteItem(focusItem!.id!);\n        setShowDeleteConfirm(false);\n        toggleModal();\n    }\n}\n","import React, {FormEvent, useState} from \"react\";\nimport {Button, FormGroup} from \"reactstrap\";\nimport GroupModel from \"../../../models/GroupModel\";\nimport {useStoreActions} from \"../../../store\";\nimport TextInput from \"../../FormInput/TextInput\";\n\n\nexport const NewGroupForm = () => {\n\n    const [newGroup, setNewGroup] = useState<GroupModel>({\n        name: \"\",\n        notes: \"\",\n        id: null,\n        visible: true\n    });\n\n    const saveGroup = useStoreActions(actions => actions.saveGroup);\n\n    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        await saveGroup(newGroup);\n        setNewGroup({...newGroup, name: \"\", notes: \"\"});\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <FormGroup>\n                <TextInput\n                    label=\"Name\"\n                    id=\"group-name-input\"\n                    type=\"text\"\n                    value={newGroup.name!}\n                    onChange={(event) => {\n                        setNewGroup({...newGroup, name: event.target.value});\n                    }}\n                    placeholder=\"The name of the group...\"\n                    required\n                />\n            </FormGroup>\n            <FormGroup>\n                <TextInput\n                    onChange={e => setNewGroup({...newGroup, notes: e.target.value})}\n                    type=\"textarea\"\n                    placeholder=\"Optional...\"\n                    id=\"group-notes-input\"\n                    label=\"Notes\"\n                    value={newGroup.notes!}\n                />\n            </FormGroup>\n            <FormGroup className=\"bottom-buttons\">\n                <Button block type=\"submit\" color=\"info\">Save</Button>\n            </FormGroup>\n        </form>\n    );\n}\n","import React, {useState} from \"react\";\nimport {Button, FormGroup} from \"reactstrap\";\nimport ItemModel from \"../../../models/ItemModel\";\nimport {useStoreActions, useStoreState} from \"../../../store\";\nimport {EditItemForm} from \"./EditItemForm\";\nimport AlertPanel from \"../../AlertPanel/AlertPanel\";\nimport {defaultNewItem, validateEditItemForm} from \"./utils\";\n\nexport const NewItemForm = () => {\n\n    const [newItem, setNewItem] = useState<ItemModel>(defaultNewItem);\n\n    const groups = useStoreState(state => state.groups);\n    const saveItem = useStoreActions(actions => actions.saveItem)\n    const [validForm, setValidForm] = useState<boolean | null>(null);\n    const [alertPanelText, setAlertPanelText] = useState<string>(\"\");\n\n    return (\n        <form onSubmit={(event) => {\n            event.preventDefault();\n            handleSubmit();\n        }}>\n            {renderAlert()}\n            <EditItemForm\n                formName=\"new-item\"\n                editedItem={newItem}\n                handleNameTextChange={(event) => {\n                    setNewItem({...newItem, name: event.target.value});\n                }}\n                handleNotesTextChange={(event) => {\n                    setNewItem({...newItem, notes: event.target.value});\n                }}\n                handleRecurringCheckChange={(event) => {\n                    setNewItem({...newItem, recurring: event.target.checked});\n                }}\n                handleGroupCheckChange={((event, groupId) => {\n                    const newGroups = groups.filter(group => {\n                        if (group.id === groupId) {\n                            return event.target.checked;\n                        }\n                        return newItem.groups.some(someGroup => someGroup.groupId === group.id);\n                    }).map(fullGroup => ({\n                        groupId: fullGroup.id!,\n                        groupName: fullGroup.name!\n                    }));\n                    setNewItem({\n                        ...newItem,\n                        groups: newGroups\n                    });\n                })}\n                handleFormSubmit={handleSubmit}\n            />\n            <FormGroup className=\"bottom-buttons\">\n                <Button block color=\"info\" type=\"submit\">Save</Button>\n            </FormGroup>\n        </form>\n    );\n\n    function renderAlert() {\n        if (validForm === false) {\n            return (\n                <AlertPanel color=\"danger\" text={alertPanelText} />\n            );\n        }\n    }\n\n    function handleSubmit() {\n        const {isValid, alertText} = validateEditItemForm(newItem);\n        setValidForm(isValid);\n        setAlertPanelText(alertText);\n\n        if (isValid) {\n            saveItem(newItem).then(() => {\n                setNewItem(defaultNewItem);\n            });\n        }\n    }\n}","export const scrollIntoView = (id: string) => {\n    document.getElementById(id)?.scrollIntoView({behavior: \"smooth\"});\n};","import React from \"react\";\n\ninterface Props {\n    children: JSX.Element[] | JSX.Element;\n}\n\nexport const StickyTop = ({children}: Props) => {\n    return (\n        <div className=\"sticky-top\" style={{zIndex: 10}}>\n            {children}\n        </div>\n    )\n}","import React, {Fragment, useState} from \"react\";\nimport Heading from \"../Heading/Heading\";\nimport {\n    Card,\n    Row,\n    Col,\n    CardBody,\n    CardHeader,\n    ButtonDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem\n} from \"reactstrap\";\nimport Groups from \"./Group/Groups\";\nimport {EditItemModal} from \"./Item/EditItemModal\";\nimport {NewGroupForm} from \"./Group/NewGroupForm\";\nimport {NewItemForm} from \"./Item/NewItemForm\";\nimport {scrollIntoView} from \"../../utils\";\nimport {StickyTop} from \"../Utils/StickyTop\";\n\nexport const ShoppingList = () => {\n\n    const ActionsDropdownMenu = () => {\n        const [showActionsDropdown, setShowActionsDropdown] = useState<boolean>(false);\n\n        const toggleDropdown = () => {\n            setShowActionsDropdown(!showActionsDropdown);\n        };\n\n        return (\n            <ButtonDropdown isOpen={showActionsDropdown} toggle={toggleDropdown}\n                            size=\"sm\" color=\"info\">\n                <DropdownToggle caret>\n                    Actions\n                </DropdownToggle>\n                <DropdownMenu right>\n                    <DropdownItem onClick={() => {\n                        scrollIntoView(\"new-item-form-card\");\n                    }}>New Item</DropdownItem>\n                    <DropdownItem onClick={() => {\n                        scrollIntoView(\"new-group-form-card\");\n                    }}>New Group</DropdownItem>\n                </DropdownMenu>\n            </ButtonDropdown>\n        );\n    }\n\n    return (\n        <Fragment>\n            <div>\n                <Heading title=\"Shopping List\">\n                    {ActionsDropdownMenu()}\n                </Heading>\n                <Row>\n                    <Col sm={12} lg={8}>\n                        <Groups/>\n                    </Col>\n                    <Col>\n                        <StickyTop>\n                            <Card id=\"new-item-form-card\" className=\"space-between mt-3 mt-lg-0\">\n                                <CardHeader>New Item</CardHeader>\n                                <CardBody className=\"pt-2\">\n                                    <NewItemForm/>\n                                </CardBody>\n                            </Card>\n                            <Card id=\"new-group-form-card\" className=\"space-between\">\n                                <CardHeader>New Group</CardHeader>\n                                <CardBody className=\"pt-2\">\n                                    <NewGroupForm/>\n                                </CardBody>\n                            </Card>\n                        </StickyTop>\n                    </Col>\n                </Row>\n            </div>\n            <EditItemModal/>\n        </Fragment>\n    )\n};\n\n","import {Container, Row, Col} from \"reactstrap\";\nimport {ShoppingList} from \"./components/ShoppingList/ShoppingList\";\nimport React from \"react\";\nimport {StoreProvider} from \"easy-peasy\";\nimport {store} from \"./store\";\n\nconst App = () => {\n\n    return (\n        <StoreProvider store={store}>\n            <Container className={\"main-container pt-0\"}>\n                <Row>\n                    <Col>\n                        {/*{alerts.map(alert => (*/}\n                        {/*    <AlertPanel color={alert.color} text={alert.text} key={alert.text}/>*/}\n                        {/*))}*/}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <ShoppingList/>\n                    </Col>\n                </Row>\n            </Container>\n        </StoreProvider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./main.css\";\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}