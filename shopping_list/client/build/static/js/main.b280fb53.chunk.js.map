{"version":3,"sources":["components/AlertPanel/AlertPanel.tsx","components/Heading/Heading.tsx","api/groups.ts","context/GroupsContext.tsx","components/ShoppingList/Group/GroupHeader.tsx","components/ShoppingList/Item/ItemLabel.tsx","components/ShoppingList/Item/Item.tsx","api/alerts.ts","api/items.ts","components/LoadingSpinner/LoadingSpinner.tsx","components/ShoppingList/Group/GroupBody.tsx","components/ShoppingList/Group/Group.tsx","components/ShoppingList/Group/Groups.tsx","components/ShoppingList/ShoppingList.tsx","App.tsx","index.tsx"],"names":["AlertPanel","props","state","visible","Alert","className","color","this","isOpen","toggle","setState","text","Component","Heading","title","children","getGroups","a","axios","get","response","data","defaultGroups","GroupsContext","React","createContext","undefined","GroupsProvider","useState","groups","setGroups","useEffect","then","groupsFromApi","Provider","value","GroupHeader","CardHeader","name","notes","Button","size","ItemLabel","htmlFor","item","id","recurring","style","paddingBottom","Item","Input","type","checked","onChange","console","log","cursor","onClick","alertsEndpoint","getAlerts","getItemsInGroup","groupId","LoadingSpinner","height","GroupBody","items","group","Table","striped","map","Group","Card","Groups","context","contextType","ShoppingList","actionsDropdownOpen","ButtonDropdown","toggleActionsMenu","DropdownToggle","caret","DropdownMenu","right","DropdownItem","Row","Col","sm","lg","renderGroups","CardBody","App","alerts","fetchNewAlerts","bind","Container","alert","ReactDOM","render","Fragment","document","getElementById"],"mappings":"+QAaqBA,E,kDACjB,WAAYC,GAAyB,IAAD,8BAChC,cAAMA,IAEDC,MAAQ,CACTC,SAAS,GAJmB,E,0CAQpC,WAAU,IAAD,OACL,OACI,cAACC,EAAA,EAAD,CACIC,UAAU,OACVC,MAAOC,KAAKN,MAAMK,MAClBE,OAAQD,KAAKL,MAAMC,QACnBM,OAAQ,kBAAM,EAAKC,SAAS,CAACP,SAAS,KAJ1C,SAMKI,KAAKN,MAAMU,W,GAjBYC,aCPnBC,E,4JACjB,WACI,OACI,8BACI,sBAAKR,UAAU,aAAf,UACI,oBAAIA,UAAU,aAAd,SAA4BE,KAAKN,MAAMa,QACvC,qBAAKT,UAAU,QAAf,SACKE,KAAKN,MAAMc,oB,GAPCH,a,wFCOxBI,EAAS,uCAAG,4BAAAC,EAAA,sEACEC,IAAMC,IAAI,gBADZ,cACfC,EADe,yBAEdA,EAASC,MAFK,2CAAH,qDCThBC,EAAmC,GAO5BC,EAAgBC,IAAMC,mBAA6CC,GAMnEC,EAAiB,SAAC1B,GAAkB,IAAD,EAChBuB,IAAMI,SAASN,GADC,mBACrCO,EADqC,KAC7BC,EAD6B,KAS5C,OANAN,IAAMO,WAAU,WACZf,IAAYgB,MAAK,SAAAC,GACbH,EAAUG,QAEf,IAGC,cAACV,EAAcW,SAAf,CAAwBC,MAAO,CAACN,OAAQA,EAAQC,aAAhD,SACK7B,EAAMc,Y,QCpBEqB,E,4JACjB,WACI,OACI,eAACC,EAAA,EAAD,CAAYhC,UAAU,SAAtB,UACI,sBAAKA,UAAU,kBAAf,UACKE,KAAKN,MAAMqC,KACU,KAArB/B,KAAKN,MAAMsC,MACN,GACA,uBAAOlC,UAAU,qBAAjB,SAAuCE,KAAKN,MAAMsC,WAE5D,qBAAKlC,UAAU,kBAAf,SACI,cAACmC,EAAA,EAAD,CAAQC,KAAK,KAAKnC,MAAM,OAAxB,+B,GAXqBM,a,yBCApB8B,E,4JACjB,WACI,OACI,wBAAOC,QAAO,mBAAcpC,KAAKN,MAAM2C,KAAKC,IAAMxC,UAAU,uBAA5D,UACKE,KAAKN,MAAM2C,KAAKN,KAChB/B,KAAKN,MAAM2C,KAAKE,UACX,cAAC,IAAD,CAAUzC,UAAU,OAAO0C,MAAO,CAACC,cAAe,SAClD,GAEqB,KAA1BzC,KAAKN,MAAM2C,KAAKL,MACX,GACA,uBAAOlC,UAAU,qBAAjB,SAAuCE,KAAKN,MAAM2C,KAAKL,e,GAXtC3B,aCElBqC,E,4JACjB,WAAU,IAAD,OACL,OACI,cAAC,WAAD,UACI,+BACI,6BACI,sBAAK5C,UAAU,iCAAf,UACI,cAAC6C,EAAA,EAAD,CACIL,GAAE,mBAActC,KAAKN,MAAM2C,KAAKC,IAChCM,KAAK,WACL9C,UAAU,uBACV+C,QAAS7C,KAAKN,MAAM2C,KAAKQ,QACzBC,SAAU,kBAAMC,QAAQC,IAAI,mBAEhC,cAAC,EAAD,CAAWX,KAAMrC,KAAKN,MAAM2C,YAGpC,6BACI,cAAC,IAAD,CACIG,MAAO,CAACS,OAAQ,WAChBC,QAAS,kBAAMH,QAAQC,IAAI,YAAa,EAAKtD,MAAM2C,oB,GApB7ChC,a,SCR5B8C,G,MAAiB,gBAEVC,EAAS,uCAAG,4BAAA1C,EAAA,sEACEC,IAAMC,IAAIuC,GADZ,cACftC,EADe,yBAEdA,EAASC,MAFK,2CAAH,qDCYTuC,EAAe,uCAAG,WAAOC,GAAP,eAAA5C,EAAA,sEACJC,IAAMC,IAAN,2BAA8B0C,IAD1B,cACrBzC,EADqB,yBAEpBA,EAASC,MAFW,2CAAH,sD,yBCRPyC,E,4JACjB,WACI,OACI,qBAAKzD,UAAWE,KAAKN,MAAMI,UAA3B,SACI,cAAC,IAAD,CACI8C,KAAK,OACLY,OAAQ,GACRzD,MAAM,e,GAPkBkB,IAAMZ,WCS7BoD,E,kDAEjB,WAAY/D,GAAe,IAAD,8BACtB,cAAMA,IACDC,MAAQ,CACT+D,MAAO,MAHW,E,4FAO1B,4BAAAhD,EAAA,sEAC0C2C,EAAgBrD,KAAKN,MAAMiE,MAAMrB,IAD3E,OACUoB,EADV,OAEI1D,KAAKG,SAAS,CAACuD,MAAOA,IAF1B,gD,0EAKA,WACI,OACI,cAAC,WAAD,UAC0B,OAArB1D,KAAKL,MAAM+D,MAER,cAACE,EAAA,EAAD,CAAO9D,UAAU,kBAAkB+D,SAAO,EAA1C,SACI,gCACC7D,KAAKL,MAAM+D,MAAMI,KAAI,SAACzB,GAAD,OAClB,cAAC,EAAD,CAAMA,KAAMA,GAAWA,EAAKC,WAKpC,cAAC,EAAD,CAAgBxC,UAAU,e,GA3BPO,aCPlB0D,E,4JAEjB,WACI,OACI,cAAC,WAAD,UACI,eAACC,EAAA,EAAD,CAAMlE,UAAU,gBAAhB,UACI,cAAC,EAAD,CACIiC,KAAM/B,KAAKN,MAAMiE,MAAM5B,KACvBC,MAAOhC,KAAKN,MAAMiE,MAAM3B,QAE5B,cAAC,EAAD,CAAW2B,MAAO3D,KAAKN,MAAMiE,iB,GAVdtD,aCNd4D,E,4MAEjBC,a,8CAEA,WACI,OACI,cAAC,WAAD,UACKlE,KAAKkE,QAAS5C,OAAOwC,KAAI,SAAAH,GAAK,OAC3B,cAAC,EAAD,CAAsBA,MAAOA,GAAjBA,EAAMrB,a,GARFjC,aAAf4D,EACVE,YAAcnD,E,ICqBJoD,E,kDAEjB,WAAY1E,GAAe,IAAD,8BACtB,cAAMA,IAEDC,MAAQ,CACT0E,qBAAqB,GAJH,E,0CAQ1B,WAAU,IAAD,OACL,OACI,gCACI,cAAC,EAAD,CAAS9D,MAAM,gBAAf,SACI,eAAC+D,EAAA,EAAD,CAAgBrE,OAAQD,KAAKL,MAAM0E,oBAAqBnE,OAAQ,kBAAM,EAAKqE,qBAC3DrC,KAAK,KAAKnC,MAAM,OADhC,UAEI,cAACyE,EAAA,EAAD,CAAgBC,OAAK,EAArB,qBAGA,eAACC,EAAA,EAAD,CAAcC,OAAK,EAAnB,UACI,cAACC,EAAA,EAAD,mBACA,cAACA,EAAA,EAAD,2BAIZ,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAjB,SACKhF,KAAKiF,iBAEV,cAACH,EAAA,EAAD,UACI,eAACd,EAAA,EAAD,CAAMlE,UAAU,6BAAhB,UACI,cAACgC,EAAA,EAAD,uBACA,cAACoD,EAAA,EAAD,gC,0BAQxB,WACI,OACI,cAAC,EAAD,UACI,cAAC,EAAD,Q,+BAKZ,WACIlF,KAAKG,SAAS,CACVkE,qBAAsBrE,KAAKL,MAAM0E,0B,GAlDHhE,aC+B3B8E,G,kDA7CX,WAAYzF,GAAa,IAAD,8BACpB,cAAMA,IAEDC,MAAQ,CACTyF,OAAQ,IAGZ,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBAPF,E,4FAUxB,sBAAA5E,EAAA,sEACUV,KAAKqF,iBADf,gD,yHAIA,sBAAA3E,EAAA,sEACUV,KAAKoD,YADf,gD,0EAIA,WAAU,IAAD,EACL,OACI,eAACmC,EAAA,EAAD,CAAWzF,UAAW,sBAAtB,UACI,cAAC+E,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,oBACK9E,KAAKL,MAAMyF,cADhB,aACK,EAAmBtB,KAAI,SAAA0B,GAAK,OACzB,cAAC,EAAD,CAAYzF,MAAOyF,EAAMzF,MAAOK,KAAMoF,EAAMpF,MAAWoF,EAAMpF,aAIzE,cAACyE,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,cAAC,EAAD,CACIO,eAAgBrF,KAAKqF,0B,8DAQ7C,4BAAA3E,EAAA,sEACyB0C,IADzB,OACUgC,EADV,OAEIpF,KAAKG,SAAS,CAACiF,OAAQA,IAF3B,gD,2DAzCc/E,a,OCLlBoF,IAASC,OACP,cAAC,IAAMC,SAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b280fb53.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport {Alert} from \"reactstrap\";\n\nexport interface AlertPanelProps {\n    color: string;\n    text: string;\n}\n\ninterface State {\n    visible: boolean;\n}\n\n\nexport default class AlertPanel extends Component<AlertPanelProps, State> {\n    constructor(props: AlertPanelProps) {\n        super(props);\n\n        this.state = {\n            visible: true\n        };\n    }\n\n    render() {\n        return (\n            <Alert\n                className=\"mt-3\"\n                color={this.props.color}\n                isOpen={this.state.visible}\n                toggle={() => this.setState({visible: false})}\n            >\n                {this.props.text}\n            </Alert>\n        );\n    }\n}","import React, {Component} from \"react\";\n\ninterface HeadingProps {\n    title: string;\n}\n\nexport default class Heading extends Component<HeadingProps, any> {\n    render() {\n        return (\n            <div>\n                <div className=\"page-title\">\n                    <h4 className=\"title-text\">{this.props.title}</h4>\n                    <div className=\"right\">\n                        {this.props.children}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import axios from \"axios\";\nimport GroupModel from \"../models/GroupModel\";\n\n\nexport const getGroup = async (groupId: number): Promise<GroupModel> => {\n    const response = await axios.get(`/api/groups/${groupId}`);\n    return {\n        id: response.data.id,\n        name: response.data.name,\n        notes: response.data.notes\n    };\n};\n\nexport const getGroups = async (): Promise<Array<GroupModel>> => {\n    const response = await axios.get(\"/api/groups/\");\n    return response.data;\n};\n\nexport const getGroupIds = async(): Promise<Array<number>> => {\n    const response = await axios.get(\"/api/groups/ids/\");\n    return response.data;\n};\n\nexport const getGroupItemIds = async (groupId: number): Promise<Array<number>> => {\n    const response = await axios.get(`/api/items/group/${groupId}`);\n    return response.data;\n}","import GroupModel from \"../models/GroupModel\";\nimport React from \"react\";\nimport {getGroups} from \"../api/groups\";\n\nconst defaultGroups: Array<GroupModel> = [];\n\ninterface GroupsContextType {\n    groups: Array<GroupModel>;\n    setGroups: React.Dispatch<React.SetStateAction<Array<GroupModel>>>;\n}\n\nexport const GroupsContext = React.createContext<GroupsContextType | undefined>(undefined);\n\ninterface Props {\n    children: React.ReactNode;\n}\n\nexport const GroupsProvider = (props: Props) => {\n    const [groups, setGroups] = React.useState(defaultGroups);\n\n    React.useEffect(() => {\n        getGroups().then(groupsFromApi => {\n            setGroups(groupsFromApi);\n        });\n    }, []);\n\n    return (\n        <GroupsContext.Provider value={{groups: groups, setGroups}}>\n            {props.children}\n        </GroupsContext.Provider>\n    );\n}","import React, {Component} from \"react\";\nimport {Button, CardHeader} from \"reactstrap\";\n\ninterface Props {\n    name: string;\n    notes: string;\n}\n\nexport default class GroupHeader extends Component<Props, any> {\n    render() {\n        return (\n            <CardHeader className=\"d-flex\">\n                <div className=\"d-block mt-auto\">\n                    {this.props.name}\n                    {this.props.notes === \"\"\n                        ? \"\"\n                        : <small className=\"d-block text-muted\">{this.props.notes}</small>}\n                </div>\n                <div className=\"my-auto ml-auto\">\n                    <Button size=\"sm\" color=\"info\">Complete</Button>\n                </div>\n            </CardHeader>\n        );\n    }\n}\n","import React, {Component} from \"react\";\nimport {FiRepeat} from \"react-icons/fi\";\nimport ItemModel from \"../../../models/ItemModel\";\n\ninterface Props {\n    item: ItemModel;\n}\n\nexport default class ItemLabel extends Component<Props, any> {\n    render() {\n        return (\n            <label htmlFor={`checkbox_${this.props.item.id}`} className=\"custom-control-label\">\n                {this.props.item.name}\n                {this.props.item.recurring\n                    ? <FiRepeat className=\"ml-1\" style={{paddingBottom: \"3px\"}}/>\n                    : \"\"\n                }\n                {this.props.item.notes === \"\"\n                    ? \"\"\n                    : <small className=\"text-muted d-block\">{this.props.item.notes}</small>\n                }\n            </label>\n        );\n    }\n}","import React, {Component, Fragment} from \"react\";\nimport ItemModel from \"../../../models/ItemModel\";\nimport {Input} from \"reactstrap\";\nimport {FaInfoCircle} from \"react-icons/fa\";\nimport ItemLabel from \"./ItemLabel\";\n\ninterface Props {\n    item: ItemModel;\n}\n\nexport default class Item extends Component<Props, any> {\n    render() {\n        return (\n            <Fragment>\n                <tr>\n                    <td>\n                        <div className=\"custom-control custom-checkbox\">\n                            <Input\n                                id={`checkbox_${this.props.item.id}`}\n                                type=\"checkbox\"\n                                className=\"custom-control-input\"\n                                checked={this.props.item.checked}\n                                onChange={() => console.log(\"check toggle\")}\n                            />\n                            <ItemLabel item={this.props.item}/>\n                        </div>\n                    </td>\n                    <td>\n                        <FaInfoCircle\n                            style={{cursor: \"pointer\"}}\n                            onClick={() => console.log(\"Info item\", this.props.item)}\n                        />\n                    </td>\n                </tr>\n            </Fragment>\n        );\n    }\n\n}","import axios from \"axios\";\n\nconst alertsEndpoint = \"/api/alerts/\";\n\nexport const getAlerts = async () => {\n    const response = await axios.get(alertsEndpoint);\n    return response.data;\n}\n\nexport const setAlert = async (text: string, color: string): Promise<void> => {\n    const response = await axios.post(alertsEndpoint,\n        {\n            text: text,\n            color: color\n        });\n    if (response.status === 200) {\n        await Promise.resolve();\n    } else {\n        await Promise.reject();\n    }\n}\n\nexport const setSuccessAlert = async (verbPastTense: string, noun: string): Promise<void> => {\n    const text = `Successfully ${verbPastTense} ${noun}.`;\n    await setAlert(text, \"success\");\n}","import axios from \"axios\";\nimport ItemModel from \"../models/ItemModel\";\nimport {setAlert, setSuccessAlert} from \"./alerts\";\n\nexport const getItem = async (itemId: number): Promise<ItemModel> => {\n    const response = await axios.get(`/api/items/${itemId}`);\n    return {\n        id: response.data.id,\n        name: response.data.name,\n        notes: response.data.notes,\n        checked: response.data.checked,\n        groups: response.data.groups,\n        recurring: response.data.recurring\n    };\n}\n\nexport const getItemsInGroup = async (groupId: number): Promise<Array<ItemModel>> => {\n    const response = await axios.get(`/api/items/group/${groupId}`);\n    return response.data;\n}\n\ninterface ItemRequestModel extends Omit<ItemModel, \"groups\"> {\n    groups: Array<number>;\n}\n\nexport const editItem = async (item: ItemModel): Promise<void> => {\n    const requestItem: ItemRequestModel = {...item, groups: []};  // todo\n    try {\n        const response = await axios.put(`/api/items/edit/${item.id}`, requestItem);\n        const responseData: ItemModel = response.data;\n        await setSuccessAlert(\"updated\", `item \"${responseData.name}\"`)\n    } catch(error) {\n        throw error;\n    }\n}","import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\nimport React from \"react\";\n\ninterface Props {\n    className?: string;\n}\n\nexport default class LoadingSpinner extends React.Component<Props, any> {\n    render() {\n        return (\n            <div className={this.props.className}>\n                <Loader\n                    type=\"Bars\"\n                    height={30}\n                    color=\"#fff\"\n                />\n            </div>\n        );\n    }\n}","import React, {Component, Fragment} from \"react\";\nimport Item from \"../Item/Item\";\nimport {Table} from \"reactstrap\";\nimport ItemModel from \"../../../models/ItemModel\";\nimport EditItemModal from \"../Item/EditItemModal/EditItemModal\";\nimport GroupModel from \"../../../models/GroupModel\";\nimport {getItemsInGroup} from \"../../../api/items\";\nimport LoadingSpinner from \"../../LoadingSpinner/LoadingSpinner\";\n\ninterface Props {\n    group: GroupModel;\n}\n\ninterface State {\n    items: Array<ItemModel> | null;\n}\n\nexport default class GroupBody extends Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            items: null\n        };\n    }\n\n    async componentDidMount() {\n        const items: Array<ItemModel> = await getItemsInGroup(this.props.group.id!);\n        this.setState({items: items});\n    }\n\n    render() {\n        return (\n            <Fragment>\n                {this.state.items !== null\n                    ?\n                    <Table className=\"mb-0 same-width\" striped>\n                        <tbody>\n                        {this.state.items.map((item: ItemModel) => (\n                            <Item item={item} key={item.id}/>\n                        ))}\n                        </tbody>\n                    </Table>\n                    :\n                    <LoadingSpinner className=\"my-3\" />\n                }\n            </Fragment>\n        );\n    }\n}","import React, {Component, Fragment} from \"react\";\nimport GroupModel from \"../../../models/GroupModel\";\nimport {Card} from \"reactstrap\";\nimport GroupHeader from \"./GroupHeader\";\nimport GroupBody from \"./GroupBody\";\n\ninterface Props {\n    group: GroupModel;\n}\n\nexport default class Group extends Component<Props, any> {\n\n    render() {\n        return (\n            <Fragment>\n                <Card className=\"space-between\">\n                    <GroupHeader\n                        name={this.props.group.name!}\n                        notes={this.props.group.notes!}\n                    />\n                    <GroupBody group={this.props.group} />\n                </Card>\n            </Fragment>\n        )\n    }\n}\n","import React, {Component, Fragment} from \"react\";\nimport {GroupsContext} from \"../../../context/GroupsContext\";\nimport Group from \"./Group\";\n\nexport default class Groups extends Component<any, any> {\n    static contextType = GroupsContext;\n    context!: React.ContextType<typeof GroupsContext>;\n\n    render() {\n        return (\n            <Fragment>\n                {this.context!.groups.map(group => (\n                    <Group key={group.id} group={group} />\n                ))}\n            </Fragment>\n        );\n    }\n}","import React, {Component} from \"react\";\nimport Heading from \"../Heading/Heading\";\nimport {\n    Card,\n    Row,\n    Col,\n    CardBody,\n    CardHeader,\n    ButtonDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem\n} from \"reactstrap\";\nimport Group from \"./Group/Group\";\nimport Groups from \"./Group/Groups\";\nimport {GroupsProvider} from \"../../context/GroupsContext\";\n\ninterface Props {\n    fetchNewAlerts: () => Promise<void>;\n}\n\ninterface State {\n    actionsDropdownOpen: boolean;\n}\n\n\nexport default class ShoppingList extends Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            actionsDropdownOpen: false\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                <Heading title=\"Shopping List\">\n                    <ButtonDropdown isOpen={this.state.actionsDropdownOpen} toggle={() => this.toggleActionsMenu()}\n                                    size=\"sm\" color=\"info\">\n                        <DropdownToggle caret>\n                            Actions\n                        </DropdownToggle>\n                        <DropdownMenu right>\n                            <DropdownItem>Test</DropdownItem>\n                            <DropdownItem>Test</DropdownItem>\n                        </DropdownMenu>\n                    </ButtonDropdown>\n                </Heading>\n                <Row>\n                    <Col sm={12} lg={8}>\n                        {this.renderGroups()}\n                    </Col>\n                    <Col>\n                        <Card className=\"space-between mt-3 mt-lg-0\">\n                            <CardHeader>New Item</CardHeader>\n                            <CardBody>Form</CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n\n    renderGroups() {\n        return (\n            <GroupsProvider>\n                <Groups/>\n            </GroupsProvider>\n        );\n    }\n\n    toggleActionsMenu() {\n        this.setState({\n            actionsDropdownOpen: !this.state.actionsDropdownOpen\n        });\n    }\n}","import {Container, Row, Col} from \"reactstrap\";\nimport AlertPanel, {AlertPanelProps} from \"./components/AlertPanel/AlertPanel\";\nimport ShoppingList from \"./components/ShoppingList/ShoppingList\";\nimport React, {Component} from \"react\";\nimport {getAlerts} from \"./api/alerts\";\n\ninterface State {\n    alerts: Array<AlertPanelProps>;\n}\n\nclass App extends Component<any, State> {\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            alerts: []\n        };\n\n        this.fetchNewAlerts = this.fetchNewAlerts.bind(this);\n    }\n\n    async componentDidMount() {\n        await this.fetchNewAlerts();\n    }\n\n    async fetchNewAlerts() {\n        await this.getAlerts();\n    }\n\n    render() {\n        return (\n            <Container className={\"main-container pt-0\"}>\n                <Row>\n                    <Col>\n                        {this.state.alerts?.map(alert => (\n                            <AlertPanel color={alert.color} text={alert.text} key={alert.text}/>\n                        ))}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <ShoppingList\n                            fetchNewAlerts={this.fetchNewAlerts}\n                        />\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n\n    async getAlerts() {\n        const alerts = await getAlerts();\n        this.setState({alerts: alerts});\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./main.css\";\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}