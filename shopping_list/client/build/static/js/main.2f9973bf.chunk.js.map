{"version":3,"sources":["components/Heading/Heading.tsx","api/alerts.ts","api/items.ts","api/groups.ts","components/ShoppingList/Item/utils.ts","store.ts","utils.ts","components/ShoppingList/Group/GroupHeader.tsx","components/ShoppingList/Item/ItemLabel.tsx","components/ShoppingList/Item/Item.tsx","components/LoadingSpinner/LoadingSpinner.tsx","components/ShoppingList/Group/GroupBody.tsx","components/ShoppingList/Group/Group.tsx","components/ShoppingList/Group/Groups.tsx","components/FormInput/TextInput.tsx","components/FormInput/CheckboxInput.tsx","components/ShoppingList/Item/EditItemForm.tsx","components/AlertPanel/AlertPanel.tsx","components/ShoppingList/Item/EditItemModal.tsx","components/ShoppingList/Group/NewGroupForm.tsx","components/ShoppingList/Item/NewItemForm.tsx","components/Utils/StickyTop.tsx","components/ShoppingList/ShoppingList.tsx","App.tsx","index.tsx"],"names":["Heading","className","this","props","title","children","Component","alertsEndpoint","setAlert","text","color","a","axios","post","status","Promise","resolve","reject","setSuccessAlert","verbPastTense","noun","editItem","item","put","id","response","responseData","data","name","message","toggleItemCheck","itemId","checked","saveItem","Error","deleteItem","delete","getGroups","get","map","group","visible","validateEditItemForm","editedItem","valid","alertText","replace","length","groups","isValid","defaultNewItem","notes","recurring","undefined","store","createStore","setGroups","action","state","payload","fetchGroups","thunk","actions","res","sort","first","second","addGroup","push","saveGroup","toggleGroup","items","setItems","fetchItems","newItem","groupId","startTime","Date","now","then","console","log","timeDif","focusItem","setFocusItem","setNewItem","alerts","originalTime","typedHooks","createTypedHooks","useStoreActions","useStoreState","useStoreDispatch","scrollIntoView","document","getElementById","behavior","GroupHeader","useState","dropdownOpen","setDropdownOpen","CardHeader","onClick","ButtonDropdown","size","isOpen","toggle","open","Button","DropdownToggle","split","DropdownMenu","right","DropdownItem","focus","groupName","find","ItemLabel","htmlFor","style","paddingBottom","Item","Input","type","onChange","event","target","cursor","LoadingSpinner","height","GroupBody","filter","some","_group","Table","striped","Group","Card","Groups","useEffect","React","memo","TextInput","Label","required","label","value","onKeyPress","placeholder","CheckboxInput","FormGroup","check","handleChange","EditItemForm","formName","handleNameTextChange","key","handleFormSubmit","handleNotesTextChange","handleRecurringCheckChange","handleGroupCheckChange","AlertPanel","Alert","setState","EditItemModal","validForm","setValidForm","alertPanelText","setAlertPanelText","showDeleteConfirm","setShowDeleteConfirm","removeFocusItem","setEditedItem","Form","Modal","centered","toggleModal","ModalHeader","ModalBody","renderAlert","newGroups","forEach","someGroup","ModalFooter","confirmDelete","NewGroupForm","newGroup","setNewGroup","handleSubmit","preventDefault","onSubmit","e","block","NewItemForm","fullGroup","StickyTop","zIndex","ShoppingList","showActionsDropdown","setShowActionsDropdown","caret","ActionsDropdownMenu","Row","Col","sm","lg","CardBody","App","Container","ReactDOM","render","Fragment"],"mappings":"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","file":"static/js/main.2f9973bf.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n\ninterface HeadingProps {\n    title: string;\n}\n\nexport default class Heading extends Component<HeadingProps, any> {\n    render() {\n        return (\n            <div>\n                <div className=\"page-title\">\n                    <h4 className=\"title-text\">{this.props.title}</h4>\n                    <div className=\"right\">\n                        {this.props.children}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import axios from \"axios\";\n\nconst alertsEndpoint = \"/api/alerts/\";\n\nexport const getAlerts = async () => {\n    const response = await axios.get(alertsEndpoint);\n    return response.data;\n}\n\nexport const setAlert = async (text: string, color: string): Promise<void> => {\n    const response = await axios.post(alertsEndpoint,\n        {\n            text: text,\n            color: color\n        });\n    if (response.status === 200) {\n        await Promise.resolve();\n    } else {\n        await Promise.reject();\n    }\n}\n\nexport const setSuccessAlert = async (verbPastTense: string, noun: string): Promise<void> => {\n    const text = `Successfully ${verbPastTense} ${noun}.`;\n    await setAlert(text, \"success\");\n}","import axios from \"axios\";\nimport ItemModel from \"../models/ItemModel\";\nimport {setAlert, setSuccessAlert} from \"./alerts\";\n\nexport const getItem = async (itemId: number): Promise<ItemModel> => {\n    const response = await axios.get(`/api/items/${itemId}`);\n    return {\n        id: response.data.id,\n        name: response.data.name,\n        notes: response.data.notes,\n        checked: response.data.checked,\n        groups: response.data.groups,\n        recurring: response.data.recurring\n    };\n}\n\nexport interface ItemRequestModel extends Omit<ItemModel, \"groups\"> {\n    groups: Array<number>;\n}\n\nexport const editItem = async (item: ItemRequestModel): Promise<void> => {\n    try {\n        const response = await axios.put(`/api/items/edit/${item.id}`, item);\n        const responseData: ItemModel = response.data;\n        await setSuccessAlert(\"updated\", `item \"${responseData.name}\"`);\n    } catch(error) {\n        await setAlert(`Error in editItem api call: ${error.message}`, \"danger\");\n    }\n}\n\nexport const toggleItemCheck = async (itemId: number, checked: boolean): Promise<void> => {\n    try {\n        await axios.put(`/api/items/toggle/${itemId}`, {\"checked\": checked});\n    } catch (error) {\n        await setAlert(`Error in toggleItemCheck api call: ${error.message}`, \"danger\");\n    }\n}\n\nexport const saveItem = async (item: ItemRequestModel): Promise<ItemModel> => {\n    try {\n        const response = await axios.post(\"/api/items/\", item);\n        const responseData: ItemModel = response.data;\n        await setSuccessAlert(\"added\", `item \"${responseData.name}\"`);\n        return responseData;\n    } catch (error) {\n        await setAlert(`Error in the saveItem api call: ${error.message}`, \"danger\");\n        throw new Error(error);\n    }\n}\n\nexport const deleteItem = async (itemId: number): Promise<void> => {\n    try {\n        await axios.delete(\"/api/items/\", {\n            data: {\n                id: itemId\n            }\n        });\n    } catch (error) {\n        await setAlert(`Error in the deleteItem api call: ${error.message}`, \"danger\");\n        throw new Error(error);\n    }\n}","import axios from \"axios\";\nimport GroupModel from \"../models/GroupModel\";\n\nexport const getGroups = async (): Promise<Array<GroupModel>> => {\n    const response = await axios.get(\"/api/groups/\");\n    return response.data.map((group: GroupModel) => {\n        return {...group, visible: true};\n    });\n};","import ItemModel from \"../../../models/ItemModel\";\n\nexport function validateEditItemForm(editedItem: ItemModel): {\n    isValid: boolean,\n    alertText: string\n} {\n    let valid = true;\n    let alertText = \"\";\n\n    if (editedItem.name.replace(\" \", \"\").length < 2) {\n        valid = false;\n        alertText += \"The 'name' field must have at least 2 characters. \";\n    }\n    if (editedItem.groups.length < 1) {\n        valid = false;\n        alertText += \"At least one group is required. \";\n    }\n\n    return {isValid: valid, alertText};\n}\n\nexport const defaultNewItem: ItemModel = {\n    name: \"\",\n    notes: \"\",\n    groups: [],\n    checked: false,\n    recurring: false,\n    id: undefined\n}","import GroupModel from \"./models/GroupModel\";\nimport {action, Action, createStore, thunk, Thunk} from \"easy-peasy\";\nimport axios from \"axios\";\nimport {createTypedHooks} from \"easy-peasy\";\nimport AlertModel from \"./models/AlertModel\";\nimport ItemModel from \"./models/ItemModel\";\nimport {deleteItem, editItem, ItemRequestModel, saveItem, toggleItemCheck} from \"./api/items\";\nimport {getGroups} from \"./api/groups\";\nimport {defaultNewItem} from \"./components/ShoppingList/Item/utils\";\n\ninterface StoreModel {\n    groups: GroupModel[];\n    setGroups: Action<StoreModel, GroupModel[]>;\n    fetchGroups: Thunk<StoreModel>;\n    addGroup: Action<StoreModel, GroupModel>;\n    saveGroup: Thunk<StoreModel, GroupModel>;\n    toggleGroup: Action<StoreModel, number>;\n\n    items: ItemModel[] | null;\n    setItems: Action<StoreModel, ItemModel[]>;\n    fetchItems: Thunk<StoreModel>;\n    editItem: Action<StoreModel, ItemModel>;\n    deleteItem: Thunk<StoreModel, number>;\n    saveItem: Thunk<StoreModel, ItemModel>;\n    toggleItemCheck: Action<StoreModel, {itemId: number, checked: boolean}>;\n    focusItem: ItemModel | null;\n    setFocusItem: Action<StoreModel, ItemModel | null>;\n    newItem: ItemModel;\n    setNewItem: Action<StoreModel, ItemModel>;\n\n    alerts: AlertModel[];\n}\n\nexport const store = createStore<StoreModel>({\n    groups: [],\n    setGroups: action((state, payload) => {\n        state.groups = payload;\n    }),\n    fetchGroups: thunk(async (actions) => {\n        const res = await getGroups();\n        actions.setGroups(res.sort((first: GroupModel, second: GroupModel) => {\n            if (first.name === \"Misc\") return 1;\n            if (second.name === \"Misc\") return -1;\n            return 0;\n        }));\n    }),\n    addGroup: action((state, payload) => {\n        state.groups.push(payload);\n    }),\n    saveGroup: thunk(async (actions, payload) => {\n        const res = await axios.post(\"/api/groups/\", payload);\n        actions.addGroup(res.data);\n        return res.data;\n    }),\n    toggleGroup: action((state, payload) => {\n        state.groups = state.groups.map(group => {\n            if (group.id !== payload) return group;\n            group.visible = !group.visible;\n            return group;\n        });\n    }),\n\n    items: null,\n    setItems: action((state, payload) => {\n        state.items = payload;\n    }),\n    fetchItems: thunk(async (actions) => {\n        const res = await axios.get(\"/api/items/\");\n        actions.setItems(res.data);\n    }),\n    editItem: action((state, payload) => {\n        const newItem: ItemRequestModel = {\n            ...payload,\n            groups: payload.groups.map(group => group.groupId)\n        };\n        state.items = state.items!.map((item: ItemModel) => {\n            if (item.id === newItem.id) {\n                return payload;\n            }\n            return item;\n        });\n        const startTime = Date.now();\n        editItem(newItem).then(() => {\n            console.log(`Item edited. Response time: ${timeDif(startTime)}s`);\n        });\n    }),\n    deleteItem: thunk(async (actions, itemId: number) => {\n        const startTime = Date.now();\n        await deleteItem(itemId);\n        console.log(`Item deleted. Response time: ${timeDif(startTime)}s`);\n        await actions.fetchItems();\n    }),\n    toggleItemCheck: action((state, payload) => {\n        const startTime = Date.now();\n        state.items = state.items!.map((item: ItemModel) => {\n            if (item.id === payload.itemId) {\n                item.checked = payload.checked;\n                return item;\n            }\n            return item;\n        });\n        toggleItemCheck(payload.itemId, payload.checked).then(() => {\n            console.log(`Item ${payload.checked ? \"\" : \"un\"}checked. Response time: ${timeDif(startTime)}s`);\n        });\n    }),\n    focusItem: null,\n    setFocusItem: action((state, payload) => {\n        state.focusItem = payload;\n    }),\n    saveItem: thunk(async (actions, payload) => {\n        const startTime = Date.now();\n        const newItem: ItemRequestModel = {\n            ...payload,\n            groups: payload.groups.map(group => group.groupId)\n        };\n        await saveItem(newItem);\n        await actions.fetchItems();\n        console.log(`New item added. Response time: ${timeDif(startTime)}s`);\n    }),\n    newItem: defaultNewItem,\n    setNewItem: action((state, payload) => {\n        state.newItem = payload;\n    }),\n\n    alerts: [],\n});\n\nconst timeDif = (originalTime: number) => {\n    return (Date.now() - originalTime) / 1000;\n}\n\nconst typedHooks = createTypedHooks<StoreModel>();\n\nexport const useStoreActions = typedHooks.useStoreActions;\nexport const useStoreDispatch = typedHooks.useStoreDispatch;\nexport const useStoreState = typedHooks.useStoreState;\n","export const scrollIntoView = (id: string) => {\n    document.getElementById(id)?.scrollIntoView({behavior: \"smooth\"});\n};","import React, {useState} from \"react\";\nimport {Button, ButtonDropdown, CardHeader, DropdownItem, DropdownMenu, DropdownToggle} from \"reactstrap\";\nimport {useStoreActions, useStoreState} from \"../../../store\";\nimport {scrollIntoView} from \"../../../utils\";\nimport {defaultNewItem} from \"../Item/utils\";\n\ninterface Props {\n    name: string;\n    notes: string;\n    id: number;\n    visible: boolean | null;\n}\n\nexport const GroupHeader = (props: Props) => {\n    const toggleGroup = useStoreActions(actions => actions.toggleGroup);\n    const [dropdownOpen, setDropdownOpen] = useState<boolean>(false);\n    const setNewItem = useStoreActions(actions => actions.setNewItem);\n    const groups = useStoreState(state => state.groups);\n\n    return (\n        <CardHeader className=\"d-flex\">\n            <div className={`d-block mt-auto ${props.visible === false && \"text-muted\"}`} onClick={() => toggleGroup(props.id)}>\n                {props.name}\n                {props.notes !== \"\" &&\n                    <small className=\"d-block text-muted\">{props.notes}</small>\n                }\n            </div>\n            <div className=\"my-auto ml-auto\">\n                <ButtonDropdown size=\"sm\" isOpen={dropdownOpen} toggle={() => setDropdownOpen(open => !open)}>\n                    <Button color=\"info\">Complete</Button>\n                    <DropdownToggle split color=\"info\" />\n                    <DropdownMenu right>\n                        <DropdownItem onClick={() => {\n                            document.getElementById(\"new-item-name-input\")?.focus();\n                            scrollIntoView(\"new-item-form-card\");\n                            setNewItem({\n                                ...defaultNewItem,\n                                groups: [\n                                    {\n                                        groupName: groups.find(group => group.id === props.id)!.name!,\n                                        groupId: props.id\n                                    }\n                                ]\n                            });\n                        }}>New Item</DropdownItem>\n                        <DropdownItem>Edit Group</DropdownItem>\n                    </DropdownMenu>\n                </ButtonDropdown>\n            </div>\n        </CardHeader>\n    );\n}\n","import React from \"react\";\nimport {FiRepeat} from \"react-icons/fi\";\nimport ItemModel from \"../../../models/ItemModel\";\n\ninterface Props {\n    item: ItemModel;\n}\n\nexport const ItemLabel = ({item}: Props) => (\n    <label htmlFor={`checkbox_${item.id}`} className=\"custom-control-label\">\n        {item.name}\n        {item.recurring\n            ? <FiRepeat className=\"ml-1\" style={{paddingBottom: \"3px\"}}/>\n            : \"\"\n        }\n        {item.notes === \"\"\n            ? \"\"\n            : <small className=\"text-muted d-block\">{item.notes}</small>\n        }\n    </label>\n);","import React, {Fragment} from \"react\";\nimport ItemModel from \"../../../models/ItemModel\";\nimport {Input} from \"reactstrap\";\nimport {ItemLabel} from \"./ItemLabel\";\nimport {FaInfoCircle} from \"react-icons/fa\";\nimport {useStoreActions} from \"../../../store\";\n\ninterface Props {\n    item: ItemModel;\n}\n\nexport const Item = ({item}: Props) => {\n    const setFocusItem = useStoreActions(actions => actions.setFocusItem);\n    const toggleItemCheck = useStoreActions(actions => actions.toggleItemCheck);\n\n    return (\n        <Fragment>\n            <tr>\n                <td>\n                    <div className=\"custom-control custom-checkbox\">\n                        <Input\n                            id={`checkbox_${item.id}`}\n                            type=\"checkbox\"\n                            className=\"custom-control-input\"\n                            checked={item.checked}\n                            onChange={(event) => toggleItemCheck({\n                                itemId: item.id!,\n                                checked: event.target.checked\n                            })}\n                        />\n                        <ItemLabel item={item}/>\n                    </div>\n                </td>\n                <td>\n                    <FaInfoCircle\n                        style={{cursor: \"pointer\"}}\n                        onClick={() => setFocusItem(item)}\n                    />\n                </td>\n            </tr>\n        </Fragment>\n    )\n};\n\n","import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\nimport React from \"react\";\n\ninterface Props {\n    className?: string;\n}\n\nexport const LoadingSpinner = ({className}: Props) => (\n    <div className={className}>\n        <Loader\n            type=\"Bars\"\n            height={30}\n            color=\"#fff\"\n        />\n    </div>\n);\n","import React, {Component, Fragment} from \"react\";\nimport {Item} from \"../Item/Item\";\nimport {Table} from \"reactstrap\";\nimport ItemModel from \"../../../models/ItemModel\";\nimport GroupModel from \"../../../models/GroupModel\";\nimport {LoadingSpinner} from \"../../LoadingSpinner/LoadingSpinner\";\nimport {useStoreState} from \"../../../store\";\n\ninterface Props {\n    group: GroupModel;\n}\n\nexport const GroupBody = ({group}: Props) => {\n\n    const items = useStoreState(state => state.items?.filter(item => (\n        item.groups.some(_group => _group.groupId === group.id)\n    )));\n\n    return (\n        <Fragment>\n            {items !== undefined\n                ?\n                <Table className=\"mb-0 same-width\" striped>\n                    <tbody>\n                    {items.map((item: ItemModel) => (\n                        <Item item={item} key={item.id}/>\n                    ))}\n                    </tbody>\n                </Table>\n                :\n                <LoadingSpinner className=\"my-3\"/>\n            }\n        </Fragment>\n    );\n};\n","import React, {Fragment} from \"react\";\nimport GroupModel from \"../../../models/GroupModel\";\nimport {Card} from \"reactstrap\";\nimport {GroupHeader} from \"./GroupHeader\";\nimport {GroupBody} from \"./GroupBody\";\n\ninterface Props {\n    group: GroupModel;\n}\n\nexport const Group = ({group}: Props) => {\n    return (\n        <Fragment>\n            <Card className=\"space-between\">\n                <GroupHeader\n                    name={group.name!}\n                    notes={group.notes!}\n                    id={group.id!}\n                    visible={group.visible}\n                />\n                {group.visible !== false && (\n                    <GroupBody group={group}/>\n                )}\n            </Card>\n        </Fragment>\n    );\n};\n","import React, {Fragment, useEffect} from \"react\";\nimport {useStoreState, useStoreActions} from \"../../../store\";\nimport {Group} from \"./Group\";\n\nconst Groups = () => {\n\n    const groups = useStoreState(state => state.groups);\n    const fetchGroups = useStoreActions(actions => actions.fetchGroups);\n    const fetchItems = useStoreActions(actions => actions.fetchItems);\n\n    useEffect(  () => {\n        fetchGroups();\n        fetchItems();\n    }, [fetchGroups, fetchItems]);\n\n    return (\n        <Fragment>\n            {groups.map(group => (\n                <Group key={group.id} group={group} />\n            ))}\n        </Fragment>\n    );\n};\n\nexport default React.memo(Groups);","import React, {ChangeEvent, Component, KeyboardEvent, Fragment} from \"react\";\nimport {Input, Label} from \"reactstrap\";\n\ninterface Props {\n    label: string;\n    id: string;\n    type: \"text\" | \"textarea\";\n    value: string;\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    onKeyPress?: (event: KeyboardEvent<HTMLInputElement>) => void;\n    required?: boolean;\n    placeholder?: string;\n}\n\nexport default class TextInput extends Component<Props, any> {\n    render() {\n        return (\n            <Fragment>\n                <Label required={this.props.required} htmlFor={this.props.id}>{this.props.label}</Label>\n                <Input\n                    required={this.props.required}\n                    id={this.props.id}\n                    type={this.props.type}\n                    value={this.props.value}\n                    onChange={this.props.onChange}\n                    onKeyPress={this.props.onKeyPress}\n                    placeholder={this.props.placeholder}\n                />\n            </Fragment>\n        );\n    }\n}","import React, {ChangeEvent, Component} from \"react\";\nimport {FormGroup, Input, Label} from \"reactstrap\";\n\ninterface Props {\n    checked: boolean;\n    handleChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    label: string;\n}\n\nexport default class CheckboxInput extends Component<Props, any> {\n    render() {\n        return (\n            <FormGroup check>\n                <Label check>\n                    <Input\n                        className=\"checkbox-lg\"\n                        checked={this.props.checked}\n                        onChange={this.props.handleChange}\n                        type=\"checkbox\"\n                    />\n                    <span className=\"pl-2\">{this.props.label}</span>\n                </Label>\n            </FormGroup>\n        );\n    }\n}\n","import React, {ChangeEvent, Fragment, useState} from \"react\";\nimport {Label, FormGroup} from \"reactstrap\";\nimport TextInput from \"../../FormInput/TextInput\";\nimport CheckboxInput from \"../../FormInput/CheckboxInput\";\nimport ItemModel from \"../../../models/ItemModel\";\nimport {useStoreState} from \"../../../store\";\n\ninterface Props {\n    editedItem: ItemModel;\n    handleNameTextChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    handleNotesTextChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    handleRecurringCheckChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    handleGroupCheckChange: (event: ChangeEvent<HTMLInputElement>, groupId: number) => void;\n    handleFormSubmit: () => void;\n    formName: string;\n}\n\nexport const EditItemForm = (props: Props) => {\n\n    const groups = useStoreState(state => state.groups);\n\n    return (\n        <Fragment>\n            {renderNameInput()}\n            {renderNotesInput()}\n            {renderRecurringInput()}\n            {renderGroupsInput()}\n        </Fragment>\n    );\n\n    function renderNameInput() {\n        return (\n            <FormGroup>\n                <TextInput\n                    required\n                    label=\"Name\"\n                    id={`${props.formName}-name-input`}\n                    type=\"text\"\n                    value={props.editedItem.name}\n                    onChange={props.handleNameTextChange}\n                    placeholder=\"The name of the item...\"\n                    onKeyPress={(event) => {\n                        if (event.key === \"Enter\") {\n                            props.handleFormSubmit();\n                        }\n                    }}\n                />\n            </FormGroup>\n        );\n    }\n\n    function renderNotesInput() {\n        return (\n            <FormGroup>\n                <TextInput\n                    label=\"Notes\"\n                    id={`${props.formName}-notes-input`}\n                    type=\"textarea\"\n                    value={props.editedItem.notes}\n                    onChange={props.handleNotesTextChange}\n                    placeholder=\"Optional...\"\n                />\n            </FormGroup>\n        );\n    }\n\n    function renderRecurringInput() {\n        return (\n            <FormGroup>\n                <Label className=\"mb-0\">Recurring</Label>\n                <CheckboxInput\n                    checked={props.editedItem.recurring}\n                    handleChange={props.handleRecurringCheckChange}\n                    label=\"Item repeats\"\n                />\n            </FormGroup>\n        );\n    }\n\n    function renderGroupsInput() {\n        return (\n            <FormGroup>\n                <Label className=\"mb-0\">Groups</Label>\n                {groups.map(group => (\n                    <CheckboxInput\n                        key={group.id}\n                        checked={props.editedItem.groups.some(_group => _group.groupId === group.id)}\n                        handleChange={(event) => props.handleGroupCheckChange(event, group.id!)}\n                        label={group.name!}\n                    />\n                ))}\n            </FormGroup>\n        );\n    }\n}\n","import React, {Component} from \"react\";\nimport {Alert} from \"reactstrap\";\n\nexport interface AlertPanelProps {\n    color: \"info\" | \"success\" | \"primary\" | \"warning\" | \"danger\";\n    text: string;\n}\n\ninterface State {\n    visible: boolean;\n}\n\n\nexport default class AlertPanel extends Component<AlertPanelProps, State> {\n    constructor(props: AlertPanelProps) {\n        super(props);\n\n        this.state = {\n            visible: true\n        };\n    }\n\n    render() {\n        return (\n            <Alert\n                className=\"mt-3\"\n                color={this.props.color}\n                isOpen={this.state.visible}\n                toggle={() => this.setState({visible: false})}\n            >\n                {this.props.text}\n            </Alert>\n        );\n    }\n}","import React, {Fragment, useEffect, useState} from \"react\";\nimport {Modal, ModalHeader, ModalBody, ModalFooter, Form, Button} from \"reactstrap\";\nimport {EditItemForm} from \"./EditItemForm\";\nimport {useStoreActions, useStoreState} from \"../../../store\";\nimport ItemModel from \"../../../models/ItemModel\";\nimport AlertPanel from \"../../AlertPanel/AlertPanel\";\nimport GroupModel from \"../../../models/GroupModel\";\nimport {defaultNewItem, validateEditItemForm} from \"./utils\";\nimport {useStore} from \"easy-peasy\";\n\nexport const EditItemModal = () => {\n\n    const focusItem = useStoreState(state => state.focusItem);\n    const setFocusItem = useStoreActions(actions => actions.setFocusItem);\n    const editItem = useStoreActions(actions => actions.editItem);\n    const deleteItem = useStoreActions(actions => actions.deleteItem);\n    const groups = useStoreState(state => state.groups);\n    const [validForm, setValidForm] = useState<boolean | null>(null);\n    const [alertPanelText, setAlertPanelText] = useState<string>(\"\");\n    const [showDeleteConfirm, setShowDeleteConfirm] = useState<boolean>(false);\n\n\n    const removeFocusItem = () => {\n        setFocusItem(null);\n    }\n\n    const [editedItem, setEditedItem] = useState<ItemModel>(focusItem!);\n\n    useEffect(() => {\n        setEditedItem(focusItem!);\n    }, [focusItem]);\n\n    return (\n        <Form>\n            {focusItem &&\n            <Fragment>\n                <Modal centered toggle={toggleModal} isOpen={true}>\n                    <ModalHeader toggle={toggleModal} className=\"d-flex\">\n                        {focusItem.name}\n                    </ModalHeader>\n                    <ModalBody>\n                        {renderAlert()}\n                        <EditItemForm\n                            formName=\"edit-item\"\n                            editedItem={editedItem}\n                            handleNameTextChange={event => setEditedItem({\n                                ...editedItem,\n                                name: event.target.value\n                            })}\n                            handleNotesTextChange={event => setEditedItem({\n                                ...editedItem,\n                                notes: event.target.value\n                            })}\n                            handleRecurringCheckChange={event => setEditedItem({\n                                ...editedItem,\n                                recurring: event.target.checked\n                            })}\n                            handleGroupCheckChange={(event, groupId) => {\n                                const newGroups: Array<{ groupId: number; groupName: string }> = [];\n                                groups.forEach((group: GroupModel) => {\n                                    if (group.id === groupId) {\n                                        if (event.target.checked) {\n                                            newGroups.push({groupId: group.id!, groupName: group.name!});\n                                        }\n                                    } else {\n                                        if (editedItem.groups.some(someGroup => someGroup.groupId === group.id)) {\n                                            newGroups.push({groupId: group.id!, groupName: group.name!});\n                                        }\n                                    }\n                                });\n                                setEditedItem({...editedItem, groups: newGroups});\n                            }}\n                            handleFormSubmit={handleFormSubmit}\n                        />\n                        {renderDeleteConfirmation()}\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button onClick={() => setShowDeleteConfirm(true)} className=\"mr-auto\" color=\"danger\">Delete</Button>\n                        <Button onClick={toggleModal} color=\"secondary\">Cancel</Button>\n                        <Button onClick={handleFormSubmit} type=\"submit\" color=\"info\">Submit</Button>\n                    </ModalFooter>\n                </Modal>\n            </Fragment>\n            }\n        </Form>\n    );\n\n    function toggleModal() {\n        removeFocusItem();\n        setValidForm(null);\n    }\n\n    function handleFormSubmit() {\n        const {isValid, alertText} = validateEditItemForm(editedItem);\n        setValidForm(isValid);\n        setAlertPanelText(alertText);\n\n        if (isValid) {\n            editItem(editedItem);\n            removeFocusItem();\n        }\n    }\n\n    function renderAlert() {\n        if (validForm === false) {\n            return (\n                <AlertPanel color=\"danger\" text={alertPanelText} />\n            );\n        }\n    }\n\n    function renderDeleteConfirmation() {\n        return (\n            <Modal isOpen={showDeleteConfirm} toggle={() => setShowDeleteConfirm(!showDeleteConfirm)}>\n                <ModalHeader toggle={() => setShowDeleteConfirm(!showDeleteConfirm)}>Confirm Item Deletion</ModalHeader>\n                <ModalBody>\n                    <p className=\"mb-0\">Are you sure you want to delete the item \"{focusItem?.name}\"?</p>\n                </ModalBody>\n                <ModalFooter>\n                    <Button onClick={() => setShowDeleteConfirm(false)} color=\"secondary\">No, cancel</Button>\n                    <Button onClick={confirmDelete} color=\"danger\">Yes, delete</Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n\n    function confirmDelete() {\n        deleteItem(focusItem!.id!);\n        setShowDeleteConfirm(false);\n        toggleModal();\n    }\n}\n","import React, {FormEvent, useState} from \"react\";\nimport {Button, FormGroup} from \"reactstrap\";\nimport GroupModel from \"../../../models/GroupModel\";\nimport {useStoreActions} from \"../../../store\";\nimport TextInput from \"../../FormInput/TextInput\";\n\n\nexport const NewGroupForm = () => {\n\n    const [newGroup, setNewGroup] = useState<GroupModel>({\n        name: \"\",\n        notes: \"\",\n        id: null,\n        visible: true\n    });\n\n    const saveGroup = useStoreActions(actions => actions.saveGroup);\n\n    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        await saveGroup(newGroup);\n        setNewGroup({...newGroup, name: \"\", notes: \"\"});\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <FormGroup>\n                <TextInput\n                    label=\"Name\"\n                    id=\"group-name-input\"\n                    type=\"text\"\n                    value={newGroup.name!}\n                    onChange={(event) => {\n                        setNewGroup({...newGroup, name: event.target.value});\n                    }}\n                    placeholder=\"The name of the group...\"\n                    required\n                />\n            </FormGroup>\n            <FormGroup>\n                <TextInput\n                    onChange={e => setNewGroup({...newGroup, notes: e.target.value})}\n                    type=\"textarea\"\n                    placeholder=\"Optional...\"\n                    id=\"group-notes-input\"\n                    label=\"Notes\"\n                    value={newGroup.notes!}\n                />\n            </FormGroup>\n            <FormGroup className=\"bottom-buttons\">\n                <Button block type=\"submit\" color=\"info\">Save</Button>\n            </FormGroup>\n        </form>\n    );\n}\n","import React, {useState} from \"react\";\nimport {Button, FormGroup} from \"reactstrap\";\nimport {useStoreActions, useStoreState} from \"../../../store\";\nimport {EditItemForm} from \"./EditItemForm\";\nimport AlertPanel from \"../../AlertPanel/AlertPanel\";\nimport {defaultNewItem, validateEditItemForm} from \"./utils\";\n\nexport const NewItemForm = () => {\n\n    const newItem = useStoreState(state => state.newItem);\n    const setNewItem = useStoreActions(actions => actions.setNewItem);\n\n    const groups = useStoreState(state => state.groups);\n    const saveItem = useStoreActions(actions => actions.saveItem)\n    const [validForm, setValidForm] = useState<boolean | null>(null);\n    const [alertPanelText, setAlertPanelText] = useState<string>(\"\");\n\n    return (\n        <form onSubmit={(event) => {\n            event.preventDefault();\n            handleSubmit();\n        }}>\n            {renderAlert()}\n            <EditItemForm\n                formName=\"new-item\"\n                editedItem={newItem}\n                handleNameTextChange={(event) => {\n                    setNewItem({...newItem, name: event.target.value});\n                }}\n                handleNotesTextChange={(event) => {\n                    setNewItem({...newItem, notes: event.target.value});\n                }}\n                handleRecurringCheckChange={(event) => {\n                    setNewItem({...newItem, recurring: event.target.checked});\n                }}\n                handleGroupCheckChange={((event, groupId) => {\n                    const newGroups = groups.filter(group => {\n                        if (group.id === groupId) {\n                            return event.target.checked;\n                        }\n                        return newItem.groups.some((someGroup: {groupId: number}) => someGroup.groupId === group.id);\n                    }).map(fullGroup => ({\n                        groupId: fullGroup.id!,\n                        groupName: fullGroup.name!\n                    }));\n                    setNewItem({\n                        ...newItem,\n                        groups: newGroups\n                    });\n                })}\n                handleFormSubmit={handleSubmit}\n            />\n            <FormGroup className=\"bottom-buttons\">\n                <Button block color=\"info\" type=\"submit\">Save</Button>\n            </FormGroup>\n        </form>\n    );\n\n    function renderAlert() {\n        if (validForm === false) {\n            return (\n                <AlertPanel color=\"danger\" text={alertPanelText} />\n            );\n        }\n    }\n\n    function handleSubmit() {\n        const {isValid, alertText} = validateEditItemForm(newItem);\n        setValidForm(isValid);\n        setAlertPanelText(alertText);\n\n        if (isValid) {\n            saveItem(newItem).then(() => {\n                setNewItem(defaultNewItem);\n            });\n        }\n    }\n}","import React from \"react\";\n\ninterface Props {\n    children: JSX.Element[] | JSX.Element;\n}\n\nexport const StickyTop = ({children}: Props) => {\n    return (\n        <div className=\"sticky-top\" style={{zIndex: 10}}>\n            {children}\n        </div>\n    )\n}","import React, {Fragment, useState} from \"react\";\nimport Heading from \"../Heading/Heading\";\nimport {\n    Card,\n    Row,\n    Col,\n    CardBody,\n    CardHeader,\n    ButtonDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem\n} from \"reactstrap\";\nimport Groups from \"./Group/Groups\";\nimport {EditItemModal} from \"./Item/EditItemModal\";\nimport {NewGroupForm} from \"./Group/NewGroupForm\";\nimport {NewItemForm} from \"./Item/NewItemForm\";\nimport {scrollIntoView} from \"../../utils\";\nimport {StickyTop} from \"../Utils/StickyTop\";\n\nexport const ShoppingList = () => {\n\n    const ActionsDropdownMenu = () => {\n        const [showActionsDropdown, setShowActionsDropdown] = useState<boolean>(false);\n\n        const toggleDropdown = () => {\n            setShowActionsDropdown(!showActionsDropdown);\n        };\n\n        return (\n            <ButtonDropdown isOpen={showActionsDropdown} toggle={toggleDropdown}\n                            size=\"sm\" color=\"info\">\n                <DropdownToggle caret>\n                    Actions\n                </DropdownToggle>\n                <DropdownMenu right>\n                    <DropdownItem onClick={() => {\n                        scrollIntoView(\"new-item-form-card\");\n                    }}>New Item</DropdownItem>\n                    <DropdownItem onClick={() => {\n                        scrollIntoView(\"new-group-form-card\");\n                    }}>New Group</DropdownItem>\n                </DropdownMenu>\n            </ButtonDropdown>\n        );\n    }\n\n    return (\n        <Fragment>\n            <div>\n                <Heading title=\"Shopping List\">\n                    {ActionsDropdownMenu()}\n                </Heading>\n                <Row>\n                    <Col sm={12} lg={8}>\n                        <Groups/>\n                    </Col>\n                    <Col>\n                        <StickyTop>\n                            <Card id=\"new-item-form-card\" className=\"space-between mt-3 mt-lg-0\">\n                                <CardHeader>New Item</CardHeader>\n                                <CardBody className=\"pt-2\">\n                                    <NewItemForm/>\n                                </CardBody>\n                            </Card>\n                            <Card id=\"new-group-form-card\" className=\"space-between\">\n                                <CardHeader>New Group</CardHeader>\n                                <CardBody className=\"pt-2\">\n                                    <NewGroupForm/>\n                                </CardBody>\n                            </Card>\n                        </StickyTop>\n                    </Col>\n                </Row>\n            </div>\n            <EditItemModal/>\n        </Fragment>\n    )\n};\n\n","import {Container, Row, Col} from \"reactstrap\";\nimport {ShoppingList} from \"./components/ShoppingList/ShoppingList\";\nimport React from \"react\";\nimport {StoreProvider} from \"easy-peasy\";\nimport {store} from \"./store\";\n\nconst App = () => {\n\n    return (\n        <StoreProvider store={store}>\n            <Container className={\"main-container pt-0\"}>\n                <Row>\n                    <Col>\n                        {/*{alerts.map(alert => (*/}\n                        {/*    <AlertPanel color={alert.color} text={alert.text} key={alert.text}/>*/}\n                        {/*))}*/}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <ShoppingList/>\n                    </Col>\n                </Row>\n            </Container>\n        </StoreProvider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./main.css\";\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}