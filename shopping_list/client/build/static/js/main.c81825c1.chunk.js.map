{"version":3,"sources":["components/Heading/Heading.tsx","api/alerts.ts","api/items.ts","api/groups.ts","components/ShoppingList/Item/utils.ts","store.ts","utils.ts","components/Utils/ConfirmModal.tsx","components/FormInput/TextInput.tsx","components/ShoppingList/Group/EditGroupModal.tsx","components/ShoppingList/Group/GroupHeader.tsx","components/ShoppingList/Item/ItemLabel.tsx","components/ShoppingList/Item/Item.tsx","components/LoadingSpinner/LoadingSpinner.tsx","components/ShoppingList/Group/GroupBody.tsx","components/ShoppingList/Group/Group.tsx","components/ShoppingList/Group/Groups.tsx","components/FormInput/CheckboxInput.tsx","components/ShoppingList/Item/EditItemForm.tsx","components/Alerts/AlertPanel.tsx","components/ShoppingList/Item/EditItemModal.tsx","components/ShoppingList/Group/NewGroupForm.tsx","components/ShoppingList/Item/NewItemForm.tsx","components/Utils/StickyTop.tsx","components/ShoppingList/ShoppingList.tsx","components/Alerts/Alerts.tsx","App.tsx","index.tsx"],"names":["Heading","className","this","props","title","children","Component","alertsEndpoint","getAlerts","a","axios","get","response","console","log","data","setAlert","text","color","post","status","Promise","resolve","reject","setSuccessAlert","verbPastTense","noun","getItems","editItem","item","put","id","responseData","name","then","message","toggleItemCheck","itemId","checked","saveItem","Error","deleteItem","delete","getGroups","map","group","visible","completeGroup","group_id","saveGroup","editGroup","validateEditItemForm","editedItem","valid","alertText","replace","length","groups","isValid","defaultNewItem","notes","recurring","undefined","store","createStore","setGroups","action","state","payload","fetchGroups","thunk","actions","res","sort","first","second","startTime","Date","now","timeDif","fetchAlerts","toggleGroup","fetchItems","items","setItems","newItem","groupId","focusItem","setFocusItem","setNewItem","alerts","setAlerts","originalTime","typedHooks","createTypedHooks","useStoreActions","useStoreState","useStoreDispatch","scrollIntoView","document","getElementById","behavior","ConfirmModal","Modal","toggle","isOpen","ModalHeader","abstract","ModalBody","specific","dialogText","ModalFooter","Button","onClick","onConfirm","TextInput","useEffect","autofocus","focus","Label","required","htmlFor","label","Input","type","value","onChange","onKeyPress","placeholder","autoFocus","EditGroupModal","useState","editedGroup","setEditedGroup","centered","FormGroup","event","target","key","submit","GroupHeader","dropdownOpen","setDropdownOpen","completeModalOpen","setCompleteModalOpen","showEditModal","setShowEditModal","CardHeader","style","cursor","ButtonDropdown","size","open","DropdownToggle","split","DropdownMenu","right","DropdownItem","groupName","find","ItemLabel","paddingBottom","Item","LoadingSpinner","height","GroupBody","filter","some","_group","Table","striped","Group","Card","Groups","React","memo","CheckboxInput","check","handleChange","EditItemForm","formName","handleNameTextChange","handleFormSubmit","preventDefault","handleNotesTextChange","handleRecurringCheckChange","handleGroupCheckChange","AlertPanel","Alert","setState","EditItemModal","validForm","setValidForm","alertPanelText","setAlertPanelText","showDeleteConfirm","setShowDeleteConfirm","removeFocusItem","setEditedItem","Form","toggleModal","renderAlert","newGroups","forEach","push","someGroup","confirmDelete","NewGroupForm","newGroup","setNewGroup","handleSubmit","onSubmit","e","block","NewItemForm","fullGroup","StickyTop","zIndex","ShoppingList","showActionsDropdown","setShowActionsDropdown","caret","ActionsDropdownMenu","Row","Col","sm","lg","CardBody","Alerts","alert","App","Container","ReactDOM","render","Fragment"],"mappings":"8OAMqBA,E,4JACjB,WACI,OACI,8BACI,sBAAKC,UAAU,aAAf,UACI,oBAAIA,UAAU,aAAd,SAA4BC,KAAKC,MAAMC,QACvC,qBAAKH,UAAU,QAAf,SACKC,KAAKC,MAAME,oB,GAPCC,a,uHCH/BC,EAAiB,eAEVC,EAAS,uCAAG,4BAAAC,EAAA,sEAC0BC,IAAMC,IAAIJ,GADpC,cACfK,EADe,OAErBC,QAAQC,IAAI,6BAA8BF,EAASG,MAF9B,kBAGdH,EAASG,MAHK,2CAAH,qDAMTC,EAAQ,uCAAG,WAAOC,EAAcC,GAArB,SAAAT,EAAA,sEACGC,IAAMS,KAAKZ,EAC9B,CACIU,KAAMA,EACNC,MAAOA,IAJK,UAMI,MANJ,OAMPE,OANO,gCAOVC,QAAQC,UAPE,+CASVD,QAAQE,SATE,4CAAH,wDAaRC,EAAe,uCAAG,WAAOC,EAAuBC,GAA9B,eAAAjB,EAAA,6DACrBQ,EADqB,uBACEQ,EADF,YACmBC,EADnB,cAErBV,EAASC,EAAM,WAFM,2CAAH,wDCJfU,EAAQ,uCAAG,4BAAAlB,EAAA,sEACwBC,IAAMC,IAAI,eADlC,cACdC,EADc,yBAEbA,EAASG,MAFI,2CAAH,qDAKRa,EAAQ,uCAAG,WAAOC,GAAP,iBAAApB,EAAA,+EAEOC,IAAMoB,IAAN,0BAA6BD,EAAKE,IAAMF,GAF/C,OAEVjB,EAFU,OAGVoB,EAA0BpB,EAASG,KACzCF,QAAQC,IAAI,WAAYkB,EAAaC,MACrCT,EAAgB,UAAD,gBAAqBQ,EAAaC,KAAlC,MAA2CC,MAAK,WAC3DrB,QAAQC,IAAIkB,EAAaC,SANb,iEASVjB,EAAS,+BAAD,OAAgC,KAAMmB,SAAW,UAT/C,yDAAH,sDAaRC,EAAe,uCAAG,WAAOC,EAAgBC,GAAvB,SAAA7B,EAAA,+EAEjBC,IAAMoB,IAAN,4BAA+BO,GAAU,CAAC,QAAWC,IAFpC,sEAIjBtB,EAAS,sCAAD,OAAuC,KAAMmB,SAAW,UAJ/C,wDAAH,wDAQfI,EAAQ,uCAAG,WAAOV,GAAP,iBAAApB,EAAA,+EAEOC,IAAMS,KAAK,cAAeU,GAFjC,cAEVjB,EAFU,OAGVoB,EAA0BpB,EAASG,KAHzB,SAIVS,EAAgB,QAAD,gBAAmBQ,EAAaC,KAAhC,MAJL,gCAKTD,GALS,mDAOVhB,EAAS,mCAAD,OAAoC,KAAMmB,SAAW,UAPnD,cAQV,IAAIK,MAAJ,MARU,0DAAH,sDAYRC,EAAU,uCAAG,WAAOJ,GAAP,iBAAA5B,EAAA,+EAEyCC,IAAMgC,OAAO,cAAe,CACnF3B,KAAM,CACFgB,GAAIM,KAJM,cAEZzB,EAFY,OAOZoB,EAAepB,EAASG,KAPZ,SAQZS,EAAgB,UAAD,gBAAqBQ,EAAaC,KAAlC,MARH,wEAUZjB,EAAS,qCAAD,OAAsC,KAAMmB,SAAW,UAVnD,cAWZ,IAAIK,MAAJ,MAXY,yDAAH,sDCtDVG,EAAS,uCAAG,4BAAAlC,EAAA,sEACEC,IAAMC,IAAI,gBADZ,cACfC,EADe,yBAEdA,EAASG,KAAK6B,KAAI,SAACC,GACtB,OAAO,2BAAIA,GAAX,IAAkBC,SAAS,QAHV,2CAAH,qDAOTC,EAAa,uCAAG,WAAOC,GAAP,eAAAvC,EAAA,sEACFC,IAAMS,KAAN,+BAAmC6B,IADjC,UAED,OADlBpC,EADmB,QAEZQ,OAFY,sBAGf,IAAIoB,MAAJ,0BAA6B5B,EAASQ,OAAtC,sBAHe,2CAAH,sDAOb6B,EAAS,uCAAG,WAAOJ,GAAP,eAAApC,EAAA,sEACsBC,IAAMS,KAAN,eAA2B0B,GADjD,cACfjC,EADe,gBAEfY,EAAgB,QAAD,iBAAoBZ,EAASG,KAAKkB,KAAlC,MAFA,2CAAH,sDAKTiB,EAAS,uCAAG,WAAOL,GAAP,eAAApC,EAAA,6DACrBI,QAAQC,IAAI,CAAC+B,UADQ,SAEsBnC,IAAMoB,IAAN,2BAA8Be,EAAMd,IAAMc,GAFhE,cAEfjC,EAFe,gBAGfY,EAAgB,SAAD,iBAAqBZ,EAASG,KAAKkB,KAAnC,MAHA,2CAAH,sDCrBf,SAASkB,EAAqBC,GAIjC,IAAIC,GAAQ,EACRC,EAAY,GAWhB,OATIF,EAAWnB,KAAKsB,QAAQ,IAAK,IAAIC,OAAS,IAC1CH,GAAQ,EACRC,GAAa,sDAEbF,EAAWK,OAAOD,OAAS,IAC3BH,GAAQ,EACRC,GAAa,oCAGV,CAACI,QAASL,EAAOC,aAGrB,IAAMK,EAA4B,CACrC1B,KAAM,GACN2B,MAAO,GACPH,OAAQ,GACRnB,SAAS,EACTuB,WAAW,EACX9B,QAAI+B,GCSKC,EAAQC,YAAwB,CACzCP,OAAQ,GACRQ,UAAWC,aAAO,SAACC,EAAOC,GACtBD,EAAMV,OAASW,KAEnBC,YAAaC,YAAK,uCAAC,WAAOC,GAAP,eAAA9D,EAAA,sEACGkC,IADH,OACT6B,EADS,OAEfD,EAAQN,UAAUO,EAAIC,MAAK,SAACC,EAAmBC,GAC3C,MAAmB,SAAfD,EAAMzC,KAAwB,EACd,SAAhB0C,EAAO1C,MAAyB,EAC7B,MALI,2CAAD,uDAQlBgB,UAAWqB,YAAK,uCAAC,WAAOC,EAASH,GAAhB,eAAA3D,EAAA,6DACPmE,EAAYC,KAAKC,MADV,SAEP7B,EAAUmB,GAFH,cAGbvD,QAAQC,IAAR,4CAAiDiE,EAAQH,GAAzD,MAHa,SAIPL,EAAQF,cAJD,uBAKPE,EAAQS,cALD,2CAAD,yDAOhBC,YAAaf,aAAO,SAACC,EAAOC,GACxBD,EAAMV,OAASU,EAAMV,OAAOb,KAAI,SAAAC,GAC5B,OAAIA,EAAMd,KAAOqC,IACjBvB,EAAMC,SAAWD,EAAMC,SADUD,QAKzCE,cAAeuB,YAAK,uCAAC,WAAOC,EAASH,GAAhB,eAAA3D,EAAA,6DACXmE,EAAYC,KAAKC,MADN,SAEX/B,EAAcqB,GAFH,cAGjBvD,QAAQC,IAAR,0CAA+CiE,EAAQH,GAAvD,MAHiB,SAIXL,EAAQW,aAJG,2CAAD,yDAMpBhC,UAAWoB,YAAK,uCAAC,WAAOC,EAASH,GAAhB,eAAA3D,EAAA,6DACPmE,EAAYC,KAAKC,MADV,SAEP5B,EAAUkB,GAFH,cAGbvD,QAAQC,IAAR,uCAA4CiE,EAAQH,GAApD,MAHa,SAIPL,EAAQF,cAJD,uBAKPE,EAAQS,cALD,2CAAD,yDAQhBG,MAAO,KACPC,SAAUlB,aAAO,SAACC,EAAOC,GACrBD,EAAMgB,MAAQf,KAElBc,WAAYZ,YAAK,uCAAC,WAAOC,GAAP,iBAAA9D,EAAA,6DACRmE,EAAYC,KAAKC,MADT,SAEMnD,IAFN,OAERwD,EAFQ,OAGdtE,QAAQC,IAAR,oBAAyBqE,EAAM3B,OAA/B,kCAA+DuB,EAAQH,GAAvE,MACAL,EAAQa,SAASD,GAJH,2CAAD,uDAMjBvD,SAAU0C,YAAK,uCAAC,WAAOC,EAAS1C,GAAhB,iBAAApB,EAAA,6DACN4E,EADM,2BAELxD,GAFK,IAGR4B,OAAQ5B,EAAK4B,OAAOb,KAAI,SAAAC,GAAK,OAAIA,EAAMyC,aAErCV,EAAYC,KAAKC,MALX,SAMNlD,EAASyD,GANH,cAOZxE,QAAQC,IAAR,sCAA2CiE,EAAQH,GAAnD,MAPY,SAQNL,EAAQW,aARF,uBASNX,EAAQS,cATF,2CAAD,yDAWfvC,WAAY6B,YAAK,uCAAC,WAAOC,EAASlC,GAAhB,eAAA5B,EAAA,6DACRmE,EAAYC,KAAKC,MADT,SAERrC,EAAWJ,GAFH,cAGdxB,QAAQC,IAAR,uCAA4CiE,EAAQH,GAApD,MAHc,SAIRL,EAAQW,aAJA,uBAKRX,EAAQS,cALA,2CAAD,yDAOjB5C,gBAAiB8B,aAAO,SAACC,EAAOC,GAC5B,IAAMQ,EAAYC,KAAKC,MACvBX,EAAMgB,MAAQhB,EAAMgB,MAAOvC,KAAI,SAACf,GAC5B,OAAIA,EAAKE,KAAOqC,EAAQ/B,QACpBR,EAAKS,QAAU8B,EAAQ9B,QAChBT,GAEJA,KAEXO,EAAgBgC,EAAQ/B,OAAQ+B,EAAQ9B,SAASJ,MAAK,WAClDrB,QAAQC,IAAR,eAAoBsD,EAAQ9B,QAAU,GAAK,KAA3C,mCAA0EyC,EAAQH,GAAlF,YAGRW,UAAW,KACXC,aAActB,aAAO,SAACC,EAAOC,GACzBD,EAAMoB,UAAYnB,KAEtB7B,SAAU+B,YAAK,uCAAC,WAAOC,EAASH,GAAhB,iBAAA3D,EAAA,6DACNmE,EAAYC,KAAKC,MACjBO,EAFM,2BAGLjB,GAHK,IAIRX,OAAQW,EAAQX,OAAOb,KAAI,SAAAC,GAAK,OAAIA,EAAMyC,aAJlC,SAMN/C,EAAS8C,GANH,cAOZxE,QAAQC,IAAR,yCAA8CiE,EAAQH,GAAtD,MAPY,SAQNL,EAAQW,aARF,uBASNX,EAAQS,cATF,2CAAD,yDAWfK,QAAS1B,EACT8B,WAAYvB,aAAO,SAACC,EAAOC,GACvBD,EAAMkB,QAAUjB,KAGpBsB,OAAQ,GACRC,UAAWzB,aAAO,SAACC,EAAOC,GACtBD,EAAMuB,OAAStB,KAEnBY,YAAaV,YAAK,uCAAC,WAAOC,GAAP,eAAA9D,EAAA,6DACfI,QAAQC,IAAI,mBADG,SAEMN,IAFN,OAETkF,EAFS,OAGfnB,EAAQoB,UAAUD,GAHH,2CAAD,yDAOhBX,EAAU,SAACa,GACb,OAAQf,KAAKC,MAAQc,GAAgB,KAGnCC,EAAaC,cAENC,EAAkBF,EAAWE,gBAE7BC,GADmBH,EAAWI,iBACdJ,EAAWG,e,QC5J3BE,EAAiB,SAACnE,GAAgB,IAAD,EAC1C,UAAAoE,SAASC,eAAerE,UAAxB,SAA6BmE,eAAe,CAACG,SAAU,Y,uCCU9CC,GAAe,SAACnG,GACzB,OACI,eAACoG,EAAA,EAAD,CAAOC,OAAQrG,EAAMqG,OAAQC,OAAQtG,EAAMsG,OAA3C,UACI,eAACC,GAAA,EAAD,CAAaF,OAAQrG,EAAMqG,OAA3B,qBACarG,EAAMwG,YAEnB,eAACC,GAAA,EAAD,WACI,0DAA6BzG,EAAM0G,SAAnC,OACA,mBAAG5G,UAAU,OAAb,SAAqBE,EAAM2G,gBAE/B,eAACC,GAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAQ9F,MAAM,YAAY+F,QAAS9G,EAAMqG,OAAzC,oBACA,cAACQ,EAAA,EAAD,CAAQ9F,MAAM,OAAO+F,QAAS9G,EAAM+G,UAApC,4B,8BCTHC,GAA6B,SAAChH,GAQvC,OANAiH,qBAAU,WACgB,IAAD,EAAjBjH,EAAMkH,YACN,UAAAlB,SAASC,eAAejG,EAAM4B,WAA9B,SAAmCuF,YAKvC,eAAC,WAAD,WACI,cAACC,GAAA,EAAD,CAAOC,SAAUrH,EAAMqH,SAAUC,QAAStH,EAAM4B,GAAhD,SAAqD5B,EAAMuH,QAC3D,cAACC,GAAA,EAAD,CACIH,SAAUrH,EAAMqH,SAChBzF,GAAI5B,EAAM4B,GACV6F,KAAMzH,EAAMyH,KACZC,MAAO1H,EAAM0H,MACbC,SAAU3H,EAAM2H,SAChBC,WAAY5H,EAAM4H,WAClBC,YAAa7H,EAAM6H,YACnBC,UAAW9H,EAAMkH,gBCtBpBa,GAAkC,SAAC,GAE1C,IADDrF,EACA,EADAA,MAAO2D,EACP,EADOA,OAAQC,EACf,EADeA,OACf,EACqC0B,mBAAqBtF,GAD1D,mBACMuF,EADN,KACmBC,EADnB,KAEKnF,EAAY6C,GAAgB,SAAAxB,GAAO,OAAIA,EAAQrB,aAErD,OACI,eAACqD,EAAA,EAAD,CAAOE,OAAQA,EAAQ6B,UAAQ,EAAC9B,OAAQA,EAAxC,UACI,cAACE,GAAA,EAAD,CAAaF,OAAQA,EAArB,wBAGA,eAACI,GAAA,EAAD,WAyBA,cAAC2B,GAAA,EAAD,UACI,cAAC,GAAD,CACIb,MAAM,OACN3F,GAAE,gBAAWc,EAAMd,GAAjB,SACF6F,KAAK,OACLC,MAAOO,EAAYnG,KACnB6F,SAAU,SAAAU,GAAK,OAAIH,EAAe,2BAC3BxF,GAD0B,IAE7BZ,KAAMuG,EAAMC,OAAOZ,UAEvBL,UAAQ,EACRH,WAAS,EACTU,WAAY,SAAAS,GAAK,MAAkB,UAAdA,EAAME,KAAmBC,SAQtD,cAACJ,GAAA,EAAD,UACI,cAAC,GAAD,CACIb,MAAM,QACN3F,GAAE,gBAAWc,EAAMd,GAAjB,UACF6F,KAAK,WACLC,MAAOO,EAAYxE,MACnBkE,SAAU,SAAAU,GAAK,OAAIH,EAAe,2BAC3BxF,GAD0B,IAE7Be,MAAO4E,EAAMC,OAAOZ,iBAjDhC,eAACd,GAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAQ/G,UAAU,UAAUiB,MAAM,SAAlC,oBACA,cAAC8F,EAAA,EAAD,CAAQ9F,MAAM,YAAY+F,QAAS,WAC/BoB,EAAexF,GACf2D,KAFJ,oBAIA,cAACQ,EAAA,EAAD,CAAQC,QAAO,sBAAE,sBAAAxG,EAAA,sEACPkI,IADO,2CAEdf,KAAK,SAAS1G,MAAM,OAFvB,0BAnBX,SA0BcyH,IA1Bd,2EA0BD,sBAAAlI,EAAA,6DACII,QAAQC,IAAI,eADhB,SAEUoC,EAAUkF,GAFpB,OAGI5B,IAHJ,4CA1BC,wBCDQoC,GAA+B,SAAC,GAAa,IAAZ/F,EAAW,EAAXA,MACpCoC,EAAcc,GAAgB,SAAAxB,GAAO,OAAIA,EAAQU,eADF,EAEbkD,oBAAkB,GAFL,mBAE9CU,EAF8C,KAEhCC,EAFgC,KAG/CrD,EAAaM,GAAgB,SAAAxB,GAAO,OAAIA,EAAQkB,cAChDhC,EAASuC,GAAc,SAAA7B,GAAK,OAAIA,EAAMV,UAJS,EAKH0E,oBAAkB,GALf,mBAK9CY,EAL8C,KAK3BC,EAL2B,KAM/CjG,EAAgBgD,GAAgB,SAAAxB,GAAO,OAAIA,EAAQxB,iBANJ,EAOXoF,oBAAkB,GAPP,mBAO9Cc,EAP8C,KAO/BC,EAP+B,KASrD,OACI,eAAC,WAAD,WACI,eAACC,EAAA,EAAD,CAAYC,MAAO,CAACC,OAAQ,WAAYpJ,UAAU,SAAlD,UACI,sBAAKA,UAAS,2BAAuC,IAAlB4C,EAAMC,SAAqB,cACzDmE,QAAS,kBAAMhC,EAAYpC,EAAMd,KADtC,UAEKc,EAAMZ,KACU,KAAhBY,EAAMe,OACP,uBAAO3D,UAAU,qBAAjB,SAAuC4C,EAAMe,WAGjD,qBAAK3D,UAAU,kBAAf,SAoBJ,eAACqJ,EAAA,EAAD,CAAgBC,KAAK,KAAK9C,OAAQoC,EAAcrC,OAAQ,kBAAMsC,GAAgB,SAAAU,GAAI,OAAKA,MAAvF,UACI,cAACxC,EAAA,EAAD,CAAQ9F,MAAM,OAAO+F,QAAS,kBAAM+B,GAAqB,SAAAQ,GAAI,OAAKA,MAAlE,sBACA,cAACC,EAAA,EAAD,CAAgBC,OAAK,EAACzJ,UAAU,cAAciB,MAAM,SACpD,eAACyI,EAAA,EAAD,CAAcC,OAAK,EAAnB,UACI,cAACC,EAAA,EAAD,CAAc5C,QAAS,WAAO,IAAD,EACzB,UAAAd,SAASC,eAAe,8BAAxB,SAAgDkB,QAChDpB,EAAe,sBACfT,EAAW,2BACJ9B,GADG,IAENF,OAAQ,CACJ,CACIqG,UAAWrG,EAAOsG,MAAK,SAAAlH,GAAK,OAAIA,EAAMd,KAAOc,EAAMd,MAAKE,KACxDqD,QAASzC,EAAMd,SAR/B,sBAaA,cAAC8H,EAAA,EAAD,CAAc5C,QAAS,WACnBiC,GAAiB,IADrB,mCAUR,cAAC,GAAD,CACIvC,SAAS,mBACTE,SAAS,sBACTC,WAAY,yIACZI,UAAW,WACPnE,EAAcF,EAAMd,IAAKG,MAAK,WAC1B8G,GAAqB,OAG7BvC,OAAQsC,EACRvC,OAAQ,kBAAMwC,GAAqB,MA9CvC,cAAC,GAAD,CAAgBnG,MAAOA,EACP2D,OAAQ,kBAAM0C,GAAiB,IAC/BzC,OAAQwC,Q,SCrCvBe,GAAY,SAAC,GAAD,IAAEnI,EAAF,EAAEA,KAAF,OACrB,wBAAO4F,QAAO,mBAAc5F,EAAKE,IAAM9B,UAAU,uBAAjD,UACK4B,EAAKI,KACLJ,EAAKgC,UACA,cAAC,KAAD,CAAU5D,UAAU,OAAOmJ,MAAO,CAACa,cAAe,SAClD,GAEU,KAAfpI,EAAK+B,MACA,GACA,uBAAO3D,UAAU,qBAAjB,SAAuC4B,EAAK+B,Y,SCN7CsG,GAAO,SAAC,GAAmB,IAAlBrI,EAAiB,EAAjBA,KACZ2D,EAAeO,GAAgB,SAAAxB,GAAO,OAAIA,EAAQiB,gBAClDpD,EAAkB2D,GAAgB,SAAAxB,GAAO,OAAIA,EAAQnC,mBAE3D,OACI,cAAC,WAAD,UACI,+BACI,6BACI,sBAAKnC,UAAU,iCAAf,UACI,cAAC0H,GAAA,EAAD,CACI5F,GAAE,mBAAcF,EAAKE,IACrB6F,KAAK,WACL3H,UAAU,uBACVqC,QAAST,EAAKS,QACdwF,SAAU,SAACU,GAAD,OAAWpG,EAAgB,CACjCC,OAAQR,EAAKE,GACbO,QAASkG,EAAMC,OAAOnG,aAG9B,cAAC,GAAD,CAAWT,KAAMA,SAGzB,6BACI,cAAC,KAAD,CACIuH,MAAO,CAACC,OAAQ,WAChBpC,QAAS,kBAAMzB,EAAa3D,c,sCC5BvCsI,GAAiB,SAAC,GAAD,IAAElK,EAAF,EAAEA,UAAF,OAC1B,qBAAKA,UAAWA,EAAhB,SACI,cAAC,KAAD,CACI2H,KAAK,OACLwC,OAAQ,GACRlJ,MAAM,YCDLmJ,GAAY,SAAC,GAAoB,IAAnBxH,EAAkB,EAAlBA,MAEjBsC,EAAQa,GAAc,SAAA7B,GAAK,uBAAIA,EAAMgB,aAAV,aAAI,EAAamF,QAAO,SAAAzI,GAAI,OACzDA,EAAK4B,OAAO8G,MAAK,SAAAC,GAAM,OAAIA,EAAOlF,UAAYzC,EAAMd,YAGxD,OACI,cAAC,WAAD,eACe+B,IAAVqB,EAEG,cAACsF,GAAA,EAAD,CAAOxK,UAAU,kBAAkByK,SAAO,EAA1C,SACI,gCACCvF,EAAMvC,KAAI,SAACf,GAAD,OACP,cAAC,GAAD,CAAMA,KAAMA,GAAWA,EAAKE,WAKpC,cAAC,GAAD,CAAgB9B,UAAU,YCpB7B0K,GAAQ,SAAC,GAAoB,IAAnB9H,EAAkB,EAAlBA,MACnB,OACI,cAAC,WAAD,UACI,eAAC+H,EAAA,EAAD,CAAM3K,UAAU,gBAAhB,UACI,cAAC,GAAD,CACI4C,MAAOA,KAEQ,IAAlBA,EAAMC,SACH,cAAC,GAAD,CAAWD,MAAOA,UCdhCgI,GAAS,WAEX,IAAMpH,EAASuC,GAAc,SAAA7B,GAAK,OAAIA,EAAMV,UACtCY,EAAc0B,GAAgB,SAAAxB,GAAO,OAAIA,EAAQF,eACjDa,EAAaa,GAAgB,SAAAxB,GAAO,OAAIA,EAAQW,cAOtD,OALAkC,qBAAY,WACR/C,IACAa,MACD,CAACb,EAAaa,IAGb,cAAC,WAAD,UACKzB,EAAOb,KAAI,SAAAC,GAAK,OACb,cAAC,GAAD,CAAsBA,MAAOA,GAAjBA,EAAMd,UAMnB+I,OAAMC,KAAKF,I,UCfLG,G,4JACjB,WACI,OACI,cAACzC,GAAA,EAAD,CAAW0C,OAAK,EAAhB,SACI,eAAC1D,GAAA,EAAD,CAAO0D,OAAK,EAAZ,UACI,cAACtD,GAAA,EAAD,CACI1H,UAAU,cACVqC,QAASpC,KAAKC,MAAMmC,QACpBwF,SAAU5H,KAAKC,MAAM+K,aACrBtD,KAAK,aAET,sBAAM3H,UAAU,OAAhB,SAAwBC,KAAKC,MAAMuH,iB,GAXZpH,aCQ9B6K,GAAe,SAAChL,GAEzB,IAAMsD,EAASuC,GAAc,SAAA7B,GAAK,OAAIA,EAAMV,UAE5C,OACI,eAAC,WAAD,WAUI,cAAC8E,GAAA,EAAD,UACI,cAAC,GAAD,CACIf,UAAQ,EACRE,MAAM,OACN3F,GAAE,UAAK5B,EAAMiL,SAAX,eACFxD,KAAK,OACLC,MAAO1H,EAAMiD,WAAWnB,KACxB6F,SAAU3H,EAAMkL,qBAChBrD,YAAY,0BACZD,WAAY,SAACS,GACS,UAAdA,EAAME,MACN7H,QAAQC,IAAI,mBACZX,EAAMmL,mBACN9C,EAAM+C,uBAUtB,cAAChD,GAAA,EAAD,UACI,cAAC,GAAD,CACIb,MAAM,QACN3F,GAAE,UAAK5B,EAAMiL,SAAX,gBACFxD,KAAK,WACLC,MAAO1H,EAAMiD,WAAWQ,MACxBkE,SAAU3H,EAAMqL,sBAChBxD,YAAY,kBAQpB,eAACO,GAAA,EAAD,WACI,cAAChB,GAAA,EAAD,CAAOtH,UAAU,OAAjB,uBACA,cAAC,GAAD,CACIqC,QAASnC,EAAMiD,WAAWS,UAC1BqH,aAAc/K,EAAMsL,2BACpB/D,MAAM,oBAQd,eAACa,GAAA,EAAD,WACI,cAAChB,GAAA,EAAD,CAAOtH,UAAU,OAAjB,oBACCwD,EAAOb,KAAI,SAAAC,GAAK,OACb,cAAC,GAAD,CAEIP,QAASnC,EAAMiD,WAAWK,OAAO8G,MAAK,SAAAC,GAAM,OAAIA,EAAOlF,UAAYzC,EAAMd,MACzEmJ,aAAc,SAAC1C,GAAD,OAAWrI,EAAMuL,uBAAuBlD,EAAO3F,EAAMd,KACnE2F,MAAO7E,EAAMZ,MAHRY,EAAMd,c,UCzEd4J,G,kDACjB,WAAYxL,GAAyB,IAAD,8BAChC,cAAMA,IAEDgE,MAAQ,CACTrB,SAAS,GAJmB,E,0CAQpC,WAAU,IAAD,OACL,OACI,cAAC8I,GAAA,EAAD,CACI3L,UAAU,OACViB,MAAOhB,KAAKC,MAAMe,MAClBuF,OAAQvG,KAAKiE,MAAMrB,QACnB0D,OAAQ,kBAAM,EAAKqF,SAAS,CAAC/I,SAAS,KAJ1C,SAMK5C,KAAKC,MAAMc,W,GAjBYX,aCL3BwL,GAAgB,WAEzB,IAAMvG,EAAYS,GAAc,SAAA7B,GAAK,OAAIA,EAAMoB,aACzCC,EAAeO,GAAgB,SAAAxB,GAAO,OAAIA,EAAQiB,gBAClD5D,EAAWmE,GAAgB,SAAAxB,GAAO,OAAIA,EAAQ3C,YAC9Ca,EAAasD,GAAgB,SAAAxB,GAAO,OAAIA,EAAQ9B,cAChDgB,EAASuC,GAAc,SAAA7B,GAAK,OAAIA,EAAMV,UANb,EAOG0E,mBAAyB,MAP5B,mBAOxB4D,EAPwB,KAObC,EAPa,OAQa7D,mBAAiB,IAR9B,mBAQxB8D,EARwB,KAQRC,EARQ,OASmB/D,oBAAkB,GATrC,mBASxBgE,EATwB,KASLC,EATK,KAYzBC,EAAkB,WACpB7G,EAAa,OAbc,EAgBK2C,mBAAoB5C,GAhBzB,mBAgBxBnC,EAhBwB,KAgBZkJ,EAhBY,KAsB/B,OAJAlF,qBAAU,WACNkF,EAAc/G,KACf,CAACA,IAGA,cAACgH,GAAA,EAAD,UACKhH,GACD,cAAC,WAAD,UACI,eAACgB,EAAA,EAAD,CAAO+B,UAAQ,EAAC9B,OAAQgG,EAAa/F,QAAQ,EAA7C,UACI,cAACC,GAAA,EAAD,CAAaF,OAAQgG,EAAavM,UAAU,SAA5C,SACKsF,EAAUtD,OAEf,eAAC2E,GAAA,EAAD,WA+DhB,WACI,IAAkB,IAAdmF,EACA,OACI,cAAC,GAAD,CAAY7K,MAAM,SAASD,KAAMgL,IAjExBQ,GACD,cAAC,GAAD,CACIrB,SAAS,YACThI,WAAYA,EACZiI,qBAAsB,SAAA7C,GAAK,OAAI8D,EAAc,2BACtClJ,GADqC,IAExCnB,KAAMuG,EAAMC,OAAOZ,UAEvB2D,sBAAuB,SAAAhD,GAAK,OAAI8D,EAAc,2BACvClJ,GADsC,IAEzCQ,MAAO4E,EAAMC,OAAOZ,UAExB4D,2BAA4B,SAAAjD,GAAK,OAAI8D,EAAc,2BAC5ClJ,GAD2C,IAE9CS,UAAW2E,EAAMC,OAAOnG,YAE5BoJ,uBAAwB,SAAClD,EAAOlD,GAC5B,IAAMoH,EAA2D,GACjEjJ,EAAOkJ,SAAQ,SAAC9J,GACRA,EAAMd,KAAOuD,EACTkD,EAAMC,OAAOnG,SACboK,EAAUE,KAAK,CAACtH,QAASzC,EAAMd,GAAK+H,UAAWjH,EAAMZ,OAGrDmB,EAAWK,OAAO8G,MAAK,SAAAsC,GAAS,OAAIA,EAAUvH,UAAYzC,EAAMd,OAChE2K,EAAUE,KAAK,CAACtH,QAASzC,EAAMd,GAAK+H,UAAWjH,EAAMZ,UAIjEqK,EAAc,2BAAIlJ,GAAL,IAAiBK,OAAQiJ,MAE1CpB,iBAAkBA,IAyClC,eAAC/E,EAAA,EAAD,CAAOE,OAAQ0F,EAAmB3F,OAAQ,kBAAM4F,GAAsBD,IAAtE,UACI,cAACzF,GAAA,EAAD,CAAaF,OAAQ,kBAAM4F,GAAsBD,IAAjD,mCACA,cAACvF,GAAA,EAAD,UACI,oBAAG3G,UAAU,OAAb,8DAA+DsF,QAA/D,IAA+DA,OAA/D,EAA+DA,EAAWtD,KAA1E,UAEJ,eAAC8E,GAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMmF,GAAqB,IAAQlL,MAAM,YAA1D,wBACA,cAAC8F,EAAA,EAAD,CAAQC,QAAS6F,EAAe5L,MAAM,SAAtC,kCA5CA,eAAC6F,GAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMmF,GAAqB,IAAOnM,UAAU,UAAUiB,MAAM,SAA7E,oBACA,cAAC8F,EAAA,EAAD,CAAQC,QAASuF,EAAatL,MAAM,YAApC,oBACA,cAAC8F,EAAA,EAAD,CAAQC,QAASqE,EAAkB1D,KAAK,SAAS1G,MAAM,OAAvD,8BAQpB,SAASsL,IACLH,IACAL,EAAa,MAGjB,SAASV,IAAoB,IAAD,EACKnI,EAAqBC,GAA3CM,EADiB,EACjBA,QAASJ,EADQ,EACRA,UAChB0I,EAAatI,GACbwI,EAAkB5I,GAEdI,IACA9B,EAASwB,GACTiJ,KA2BR,SAASS,IACLrK,EAAW8C,EAAWxD,IACtBqK,GAAqB,GACrBI,MCzHKO,GAAe,WAAO,IAAD,EAEE5E,mBAAqB,CACjDlG,KAAM,GACN2B,MAAO,GACP7B,GAAI,KACJe,SAAS,IANiB,mBAEvBkK,EAFuB,KAEbC,EAFa,KASxBhK,EAAY8C,GAAgB,SAAAxB,GAAO,OAAIA,EAAQtB,aAE/CiK,EAAY,uCAAG,WAAO1E,GAAP,SAAA/H,EAAA,6DACjB+H,EAAM+C,iBADW,SAEXtI,EAAU+J,GAFC,OAGjBC,EAAY,2BAAID,GAAL,IAAe/K,KAAM,GAAI2B,MAAO,MAH1B,2CAAH,sDAMlB,OACI,uBAAMuJ,SAAUD,EAAhB,UACI,cAAC3E,GAAA,EAAD,UACI,cAAC,GAAD,CACIb,MAAM,OACN3F,GAAG,mBACH6F,KAAK,OACLC,MAAOmF,EAAS/K,KAChB6F,SAAU,SAACU,GACPyE,EAAY,2BAAID,GAAL,IAAe/K,KAAMuG,EAAMC,OAAOZ,UAEjDG,YAAY,2BACZR,UAAQ,MAGhB,cAACe,GAAA,EAAD,UACI,cAAC,GAAD,CACIT,SAAU,SAAAsF,GAAC,OAAIH,EAAY,2BAAID,GAAL,IAAepJ,MAAOwJ,EAAE3E,OAAOZ,UACzDD,KAAK,WACLI,YAAY,cACZjG,GAAG,oBACH2F,MAAM,QACNG,MAAOmF,EAASpJ,UAGxB,cAAC2E,GAAA,EAAD,CAAWtI,UAAU,iBAArB,SACI,cAAC+G,EAAA,EAAD,CAAQqG,OAAK,EAACzF,KAAK,SAAS1G,MAAM,OAAlC,wBC3CHoM,GAAc,WAEvB,IAAMjI,EAAUW,GAAc,SAAA7B,GAAK,OAAIA,EAAMkB,WACvCI,EAAaM,GAAgB,SAAAxB,GAAO,OAAIA,EAAQkB,cAEhDhC,EAASuC,GAAc,SAAA7B,GAAK,OAAIA,EAAMV,UACtClB,EAAWwD,GAAgB,SAAAxB,GAAO,OAAIA,EAAQhC,YANvB,EAOK4F,mBAAyB,MAP9B,mBAOtB4D,EAPsB,KAOXC,EAPW,OAQe7D,mBAAiB,IARhC,mBAQtB8D,EARsB,KAQNC,EARM,KAU7B,OACI,uBAAMiB,SAAU,SAAC3E,GACbA,EAAM+C,iBACN2B,KAFJ,UAwCJ,WACI,IAAkB,IAAdnB,EACA,OACI,cAAC,GAAD,CAAY7K,MAAM,SAASD,KAAMgL,IAvCpCQ,GACD,cAAC,GAAD,CACIrB,SAAS,WACThI,WAAYiC,EACZgG,qBAAsB,SAAC7C,GACnB/C,EAAW,2BAAIJ,GAAL,IAAcpD,KAAMuG,EAAMC,OAAOZ,UAE/C2D,sBAAuB,SAAChD,GACpB/C,EAAW,2BAAIJ,GAAL,IAAczB,MAAO4E,EAAMC,OAAOZ,UAEhD4D,2BAA4B,SAACjD,GACzB/C,EAAW,2BAAIJ,GAAL,IAAcxB,UAAW2E,EAAMC,OAAOnG,YAEpDoJ,uBAAyB,SAAClD,EAAOlD,GAC7B,IAAMoH,EAAYjJ,EAAO6G,QAAO,SAAAzH,GAC5B,OAAIA,EAAMd,KAAOuD,EACNkD,EAAMC,OAAOnG,QAEjB+C,EAAQ5B,OAAO8G,MAAK,SAACsC,GAAD,OAAkCA,EAAUvH,UAAYzC,EAAMd,SAC1Fa,KAAI,SAAA2K,GAAS,MAAK,CACjBjI,QAASiI,EAAUxL,GACnB+H,UAAWyD,EAAUtL,SAEzBwD,EAAW,2BACJJ,GADG,IAEN5B,OAAQiJ,MAGhBpB,iBAAkB4B,IAEtB,cAAC3E,GAAA,EAAD,CAAWtI,UAAU,iBAArB,SACI,cAAC+G,EAAA,EAAD,CAAQqG,OAAK,EAACnM,MAAM,OAAO0G,KAAK,SAAhC,uBAaZ,SAASsF,IACLrM,QAAQC,IAAI,mBADQ,MAESqC,EAAqBkC,GAA3C3B,EAFa,EAEbA,QAASJ,EAFI,EAEJA,UAChB0I,EAAatI,GACbwI,EAAkB5I,GAEdI,GACAnB,EAAS8C,GAASnD,MAAK,WACnBuD,EAAW9B,QCpEd6J,GAAY,SAAC,GAAuB,IAAtBnN,EAAqB,EAArBA,SACvB,OACI,qBAAKJ,UAAU,aAAamJ,MAAO,CAACqE,OAAQ,IAA5C,SACKpN,KCWAqN,GAAe,WA2BxB,OACI,eAAC,WAAD,WACI,gCACI,cAAC,EAAD,CAAStN,MAAM,gBAAf,SA5BgB,WAAO,IAAD,EACwB+H,oBAAkB,GAD1C,mBACvBwF,EADuB,KACFC,EADE,KAO9B,OACI,eAACtE,EAAA,EAAD,CAAgB7C,OAAQkH,EAAqBnH,OAL1B,WACnBoH,GAAwBD,IAKRpE,KAAK,KAAKrI,MAAM,OADhC,UAEI,cAACuI,EAAA,EAAD,CAAgBoE,OAAK,EAArB,qBAGA,eAAClE,EAAA,EAAD,CAAcC,OAAK,EAAnB,UACI,cAACC,EAAA,EAAD,CAAc5C,QAAS,WACnBf,EAAe,uBADnB,sBAGA,cAAC2D,EAAA,EAAD,CAAc5C,QAAS,WACnBf,EAAe,wBADnB,6BAYC4H,KAEL,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAjB,SACI,cAAC,GAAD,MAEJ,cAACF,EAAA,EAAD,UACI,eAAC,GAAD,WACI,eAACpD,EAAA,EAAD,CAAM7I,GAAG,qBAAqB9B,UAAU,6BAAxC,UACI,cAACkJ,EAAA,EAAD,uBACA,cAACgF,EAAA,EAAD,CAAUlO,UAAU,OAApB,SACI,cAAC,GAAD,SAGR,eAAC2K,EAAA,EAAD,CAAM7I,GAAG,sBAAsB9B,UAAU,gBAAzC,UACI,cAACkJ,EAAA,EAAD,wBACA,cAACgF,EAAA,EAAD,CAAUlO,UAAU,OAApB,SACI,cAAC,GAAD,oBAOxB,cAAC,GAAD,QCvECmO,GAAS,WAClB,IAAM1I,EAASM,GAAc,SAAA7B,GAAK,OAAIA,EAAMuB,UAE5C,OACI,cAAC,WAAD,iBACKA,QADL,IACKA,OADL,EACKA,EAAQ9C,KAAI,SAAAyL,GAAK,OACd,cAAC,GAAD,CAA6BnN,MAAOmN,EAAMnN,MAAOD,KAAMoN,EAAMpN,MAA5CoN,EAAMpN,YCiBxBqN,GApBH,WAER,OACI,cAAC,IAAD,CAAevK,MAAOA,EAAtB,SACI,eAACwK,EAAA,EAAD,CAAWtO,UAAW,sBAAtB,UACI,cAAC8N,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,cAAC,GAAD,QAGR,cAACD,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,cAAC,GAAD,c,OCdxBQ,IAASC,OACP,cAAC,IAAMC,SAAP,UACE,cAAC,GAAD,MAEFvI,SAASC,eAAe,W","file":"static/js/main.c81825c1.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n\ninterface HeadingProps {\n    title: string;\n}\n\nexport default class Heading extends Component<HeadingProps, any> {\n    render() {\n        return (\n            <div>\n                <div className=\"page-title\">\n                    <h4 className=\"title-text\">{this.props.title}</h4>\n                    <div className=\"right\">\n                        {this.props.children}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import axios from \"axios\";\nimport AlertModel from \"../models/AlertModel\";\n\nconst alertsEndpoint = \"/api/alerts/\";\n\nexport const getAlerts = async () => {\n    const response: { data: AlertModel[] } = await axios.get(alertsEndpoint);\n    console.log(\"getAlerts(), response.data\", response.data);\n    return response.data;\n}\n\nexport const setAlert = async (text: string, color: string): Promise<void> => {\n    const response = await axios.post(alertsEndpoint,\n        {\n            text: text,\n            color: color\n        });\n    if (response.status === 200) {\n        await Promise.resolve();\n    } else {\n        await Promise.reject();\n    }\n}\n\nexport const setSuccessAlert = async (verbPastTense: string, noun: string): Promise<void> => {\n    const text = `Successfully ${verbPastTense} ${noun}.`;\n    await setAlert(text, \"success\");\n}","import axios from \"axios\";\nimport ItemModel from \"../models/ItemModel\";\nimport {setAlert, setSuccessAlert} from \"./alerts\";\n\nexport const getItem = async (itemId: number): Promise<ItemModel> => {\n    const response = await axios.get(`/api/items/${itemId}`);\n    return {\n        id: response.data.id,\n        name: response.data.name,\n        notes: response.data.notes,\n        checked: response.data.checked,\n        groups: response.data.groups,\n        recurring: response.data.recurring\n    };\n}\n\nexport interface ItemRequestModel extends Omit<ItemModel, \"groups\"> {\n    groups: Array<number>;\n}\n\nexport const getItems = async (): Promise<ItemModel[]> => {\n    const response: {data: ItemModel[]} = await axios.get(\"/api/items/\");\n    return response.data;\n}\n\nexport const editItem = async (item: ItemRequestModel): Promise<void> => {\n    try {\n        const response = await axios.put(`/api/items/edit/${item.id}`, item);\n        const responseData: ItemModel = response.data;\n        console.log(\"new name\", responseData.name);\n        setSuccessAlert(\"updated\", `item \"${responseData.name}\"`).then(() => {\n            console.log(responseData.name);\n        });\n    } catch(error) {\n        await setAlert(`Error in editItem api call: ${error.message}`, \"danger\");\n    }\n}\n\nexport const toggleItemCheck = async (itemId: number, checked: boolean): Promise<void> => {\n    try {\n        await axios.put(`/api/items/toggle/${itemId}`, {\"checked\": checked});\n    } catch (error) {\n        await setAlert(`Error in toggleItemCheck api call: ${error.message}`, \"danger\");\n    }\n}\n\nexport const saveItem = async (item: ItemRequestModel): Promise<ItemModel> => {\n    try {\n        const response = await axios.post(\"/api/items/\", item);\n        const responseData: ItemModel = response.data;\n        await setSuccessAlert(\"added\", `item \"${responseData.name}\"`);\n        return responseData;\n    } catch (error) {\n        await setAlert(`Error in the saveItem api call: ${error.message}`, \"danger\");\n        throw new Error(error);\n    }\n}\n\nexport const deleteItem = async (itemId: number): Promise<void> => {\n    try {\n        const response: {data: {id: number, name: string}} = await axios.delete(\"/api/items/\", {\n            data: {\n                id: itemId\n            }\n        });\n        const responseData = response.data;\n        await setSuccessAlert(\"deleted\", `item \"${responseData.name}\"`);\n    } catch (error) {\n        await setAlert(`Error in the deleteItem api call: ${error.message}`, \"danger\");\n        throw new Error(error);\n    }\n}","import axios from \"axios\";\nimport GroupModel from \"../models/GroupModel\";\nimport {setSuccessAlert} from \"./alerts\";\n\nexport const getGroups = async (): Promise<Array<GroupModel>> => {\n    const response = await axios.get(\"/api/groups/\");\n    return response.data.map((group: GroupModel) => {\n        return {...group, visible: true};\n    });\n};\n\nexport const completeGroup = async (group_id: number): Promise<void> => {\n    const response = await axios.post(`/api/groups/complete/${group_id}`);\n    if (response.status !== 200) {\n        throw new Error(`Response status ${response.status} in completeGroup`);\n    }\n}\n\nexport const saveGroup = async (group: GroupModel): Promise<void> => {\n    const response: {data: GroupModel} = await axios.post(`/api/groups/`, group);\n    await setSuccessAlert(\"added\", `group \"${response.data.name}\"`);\n}\n\nexport const editGroup = async (group: GroupModel): Promise<void> => {\n    console.log({group});\n    const response: {data: GroupModel} = await axios.put(`/api/groups/edit/${group.id}`, group);\n    await setSuccessAlert(\"edited\", `group \"${response.data.name}\"`);\n}","import ItemModel from \"../../../models/ItemModel\";\n\nexport function validateEditItemForm(editedItem: ItemModel): {\n    isValid: boolean,\n    alertText: string\n} {\n    let valid = true;\n    let alertText = \"\";\n\n    if (editedItem.name.replace(\" \", \"\").length < 2) {\n        valid = false;\n        alertText += \"The 'name' field must have at least 2 characters. \";\n    }\n    if (editedItem.groups.length < 1) {\n        valid = false;\n        alertText += \"At least one group is required. \";\n    }\n\n    return {isValid: valid, alertText};\n}\n\nexport const defaultNewItem: ItemModel = {\n    name: \"\",\n    notes: \"\",\n    groups: [],\n    checked: false,\n    recurring: false,\n    id: undefined\n}","import GroupModel from \"./models/GroupModel\";\nimport {action, Action, createStore, thunk, Thunk} from \"easy-peasy\";\nimport {createTypedHooks} from \"easy-peasy\";\nimport AlertModel from \"./models/AlertModel\";\nimport ItemModel from \"./models/ItemModel\";\nimport {deleteItem, editItem, getItems, ItemRequestModel, saveItem, toggleItemCheck} from \"./api/items\";\nimport {completeGroup, editGroup, getGroups, saveGroup} from \"./api/groups\";\nimport {defaultNewItem} from \"./components/ShoppingList/Item/utils\";\nimport {getAlerts} from \"./api/alerts\";\n\ninterface StoreModel {\n    groups: GroupModel[];\n    setGroups: Action<StoreModel, GroupModel[]>;\n    fetchGroups: Thunk<StoreModel>;\n    saveGroup: Thunk<StoreModel, GroupModel>;\n    toggleGroup: Action<StoreModel, number>;\n    completeGroup: Thunk<StoreModel, number>\n    editGroup: Thunk<StoreModel, GroupModel>;\n\n    items: ItemModel[] | null;\n    setItems: Action<StoreModel, ItemModel[]>;\n    fetchItems: Thunk<StoreModel>;\n    editItem: Thunk<StoreModel, ItemModel>;\n    deleteItem: Thunk<StoreModel, number>;\n    saveItem: Thunk<StoreModel, ItemModel>;\n    toggleItemCheck: Action<StoreModel, {itemId: number, checked: boolean}>;\n    focusItem: ItemModel | null;\n    setFocusItem: Action<StoreModel, ItemModel | null>;\n    newItem: ItemModel;\n    setNewItem: Action<StoreModel, ItemModel>;\n\n    alerts: AlertModel[];\n    setAlerts: Action<StoreModel, AlertModel[]>;\n    fetchAlerts: Thunk<StoreModel>;\n}\n\nexport const store = createStore<StoreModel>({\n    groups: [],\n    setGroups: action((state, payload) => {\n        state.groups = payload;\n    }),\n    fetchGroups: thunk(async (actions) => {\n        const res = await getGroups();\n        actions.setGroups(res.sort((first: GroupModel, second: GroupModel) => {\n            if (first.name === \"Misc\") return 1;\n            if (second.name === \"Misc\") return -1;\n            return 0;\n        }));\n    }),\n    saveGroup: thunk(async (actions, payload) => {\n        const startTime = Date.now();\n        await saveGroup(payload);\n        console.log(`New group created. Response time: ${timeDif(startTime)}s`);\n        await actions.fetchGroups();\n        await actions.fetchAlerts();\n    }),\n    toggleGroup: action((state, payload) => {\n        state.groups = state.groups.map(group => {\n            if (group.id !== payload) return group;\n            group.visible = !group.visible;\n            return group;\n        });\n    }),\n    completeGroup: thunk(async (actions, payload) => {\n        const startTime = Date.now();\n        await completeGroup(payload);\n        console.log(`Group completed. Response time: ${timeDif(startTime)}s`);\n        await actions.fetchItems();\n    }),\n    editGroup: thunk(async (actions, payload) => {\n        const startTime = Date.now();\n        await editGroup(payload);\n        console.log(`Group edited. Response time: ${timeDif(startTime)}s`);\n        await actions.fetchGroups();\n        await actions.fetchAlerts();\n    }),\n\n    items: null,\n    setItems: action((state, payload) => {\n        state.items = payload;\n    }),\n    fetchItems: thunk(async (actions) => {\n        const startTime = Date.now();\n        const items = await getItems();\n        console.log(`Retrieved ${items.length} items. Response time: ${timeDif(startTime)}s`);\n        actions.setItems(items);\n    }),\n    editItem: thunk(async (actions, item) => {\n        const newItem: ItemRequestModel = {\n            ...item,\n            groups: item.groups.map(group => group.groupId)\n        };\n        const startTime = Date.now();\n        await editItem(newItem);\n        console.log(`Item edited. Response time: ${timeDif(startTime)}s`);\n        await actions.fetchItems();\n        await actions.fetchAlerts();\n    }),\n    deleteItem: thunk(async (actions, itemId: number) => {\n        const startTime = Date.now();\n        await deleteItem(itemId);\n        console.log(`Item deleted. Response time: ${timeDif(startTime)}s`);\n        await actions.fetchItems();\n        await actions.fetchAlerts();\n    }),\n    toggleItemCheck: action((state, payload) => {\n        const startTime = Date.now();\n        state.items = state.items!.map((item: ItemModel) => {\n            if (item.id === payload.itemId) {\n                item.checked = payload.checked;\n                return item;\n            }\n            return item;\n        });\n        toggleItemCheck(payload.itemId, payload.checked).then(() => {\n            console.log(`Item ${payload.checked ? \"\" : \"un\"}checked. Response time: ${timeDif(startTime)}s`);\n        });\n    }),\n    focusItem: null,\n    setFocusItem: action((state, payload) => {\n        state.focusItem = payload;\n    }),\n    saveItem: thunk(async (actions, payload) => {\n        const startTime = Date.now();\n        const newItem: ItemRequestModel = {\n            ...payload,\n            groups: payload.groups.map(group => group.groupId)\n        };\n        await saveItem(newItem);\n        console.log(`New item added. Response time: ${timeDif(startTime)}s`);\n        await actions.fetchItems();\n        await actions.fetchAlerts();\n    }),\n    newItem: defaultNewItem,\n    setNewItem: action((state, payload) => {\n        state.newItem = payload;\n    }),\n\n    alerts: [],\n    setAlerts: action((state, payload) => {\n        state.alerts = payload;\n    }),\n    fetchAlerts: thunk(async (actions) => {\n        console.log(\"fetching alerts\");\n        const alerts = await getAlerts();\n        actions.setAlerts(alerts);\n    })\n});\n\nconst timeDif = (originalTime: number) => {\n    return (Date.now() - originalTime) / 1000;\n}\n\nconst typedHooks = createTypedHooks<StoreModel>();\n\nexport const useStoreActions = typedHooks.useStoreActions;\nexport const useStoreDispatch = typedHooks.useStoreDispatch;\nexport const useStoreState = typedHooks.useStoreState;\n","\nexport const scrollIntoView = (id: string) => {\n    document.getElementById(id)?.scrollIntoView({behavior: \"smooth\"});\n};\n","import React from \"react\";\nimport {Button, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\n\ninterface Props {\n    abstract: string;\n    specific: string;\n    dialogText: string;\n    onConfirm: () => any;\n    isOpen: boolean;\n    toggle: () => any;\n}\n\nexport const ConfirmModal = (props: Props) => {\n    return (\n        <Modal toggle={props.toggle} isOpen={props.isOpen}>\n            <ModalHeader toggle={props.toggle}>\n                Confirm {props.abstract}\n            </ModalHeader>\n            <ModalBody>\n                <p>Are you sure you want to {props.specific}?</p>\n                <p className=\"mb-0\">{props.dialogText}</p>\n            </ModalBody>\n            <ModalFooter>\n                <Button color=\"secondary\" onClick={props.toggle}>Cancel</Button>\n                <Button color=\"info\" onClick={props.onConfirm}>Confirm</Button>\n            </ModalFooter>\n        </Modal>\n    );\n}\n","import React, {ChangeEvent, Component, KeyboardEvent, Fragment, useEffect} from \"react\";\nimport {Input, Label} from \"reactstrap\";\n\ninterface Props {\n    label: string;\n    id: string;\n    type: \"text\" | \"textarea\";\n    value: string;\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    onKeyPress?: (event: KeyboardEvent<HTMLInputElement>) => void;\n    required?: boolean;\n    placeholder?: string;\n    autofocus?: boolean;\n}\n\nexport const TextInput: React.FC<Props> = (props) => {\n\n    useEffect(() => {\n        if (props.autofocus) {\n            document.getElementById(props.id)?.focus();\n        }\n    });\n\n    return (\n        <Fragment>\n            <Label required={props.required} htmlFor={props.id}>{props.label}</Label>\n            <Input\n                required={props.required}\n                id={props.id}\n                type={props.type}\n                value={props.value}\n                onChange={props.onChange}\n                onKeyPress={props.onKeyPress}\n                placeholder={props.placeholder}\n                autoFocus={props.autofocus}\n            />\n        </Fragment>\n    );\n}","import React, {useEffect, useState} from \"react\";\nimport {Button, FormGroup, Label, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\nimport GroupModel from \"../../../models/GroupModel\";\nimport {TextInput} from \"../../FormInput/TextInput\";\nimport {useStoreActions} from \"../../../store\";\n\ninterface Props {\n    group: GroupModel;\n    toggle: () => void;\n    isOpen: boolean;\n}\n\nexport const EditGroupModal: React.FC<Props> = (\n    {group, toggle, isOpen}\n) => {\n    const [editedGroup, setEditedGroup] = useState<GroupModel>(group);\n    const editGroup = useStoreActions(actions => actions.editGroup);\n\n    return (\n        <Modal isOpen={isOpen} centered toggle={toggle}>\n            <ModalHeader toggle={toggle}>\n                Edit Group\n            </ModalHeader>\n            <ModalBody>\n                {renderNameInput()}\n                {renderNotesInput()}\n            </ModalBody>\n            <ModalFooter>\n                <Button className=\"mr-auto\" color=\"danger\">Delete</Button>\n                <Button color=\"secondary\" onClick={() => {\n                    setEditedGroup(group);\n                    toggle();\n                }}>Cancel</Button>\n                <Button onClick={async () => {\n                    await submit();\n                }} type=\"submit\" color=\"info\">Submit</Button>\n            </ModalFooter>\n        </Modal>\n    );\n\n    async function submit() {\n        console.log(\"submit form\");\n        await editGroup(editedGroup);\n        toggle();\n    }\n\n    function renderNameInput() {\n        return (\n            <FormGroup>\n                <TextInput\n                    label=\"Name\"\n                    id={`group-${group.id}-name`}\n                    type=\"text\"\n                    value={editedGroup.name!}\n                    onChange={event => setEditedGroup({\n                        ...group,\n                        name: event.target.value\n                    })}\n                    required\n                    autofocus\n                    onKeyPress={event => event.key === \"Enter\" && submit()}\n                />\n            </FormGroup>\n        );\n    }\n\n    function renderNotesInput() {\n        return (\n            <FormGroup>\n                <TextInput\n                    label=\"Notes\"\n                    id={`group-${group.id}-notes`}\n                    type=\"textarea\"\n                    value={editedGroup.notes!}\n                    onChange={event => setEditedGroup({\n                        ...group,\n                        notes: event.target.value\n                    })}\n                />\n            </FormGroup>\n        );\n    }\n}\n","import React, {useState, Fragment} from \"react\";\nimport {Button, ButtonDropdown, CardHeader, DropdownItem, DropdownMenu, DropdownToggle} from \"reactstrap\";\nimport {useStoreActions, useStoreState} from \"../../../store\";\nimport {scrollIntoView} from \"../../../utils\";\nimport {defaultNewItem} from \"../Item/utils\";\nimport {ConfirmModal} from \"../../Utils/ConfirmModal\";\nimport {EditGroupModal} from \"./EditGroupModal\";\nimport GroupModel from \"../../../models/GroupModel\";\n\ninterface Props {\n    group: GroupModel;\n}\n\nexport const GroupHeader: React.FC<Props> = ({group}) => {\n    const toggleGroup = useStoreActions(actions => actions.toggleGroup);\n    const [dropdownOpen, setDropdownOpen] = useState<boolean>(false);\n    const setNewItem = useStoreActions(actions => actions.setNewItem);\n    const groups = useStoreState(state => state.groups);\n    const [completeModalOpen, setCompleteModalOpen] = useState<boolean>(false)\n    const completeGroup = useStoreActions(actions => actions.completeGroup);\n    const [showEditModal, setShowEditModal] = useState<boolean>(false);\n\n    return (\n        <Fragment>\n            <CardHeader style={{cursor: \"pointer\"}} className=\"d-flex\">\n                <div className={`d-block mt-auto ${group.visible === false && \"text-muted\"}`}\n                     onClick={() => toggleGroup(group.id!)}>\n                    {group.name}\n                    {group.notes !== \"\" &&\n                    <small className=\"d-block text-muted\">{group.notes}</small>\n                    }\n                </div>\n                <div className=\"my-auto ml-auto\">\n                    {renderButtonDropdown()}\n                </div>\n            </CardHeader>\n            {renderConfirmModal()}\n            {renderEditModal()}\n        </Fragment>\n    );\n\n    function renderEditModal() {\n        return (\n            <EditGroupModal group={group}\n                            toggle={() => setShowEditModal(false)}\n                            isOpen={showEditModal}\n            />\n        );\n    }\n\n    function renderButtonDropdown() {\n        return (\n            <ButtonDropdown size=\"sm\" isOpen={dropdownOpen} toggle={() => setDropdownOpen(open => !open)}>\n                <Button color=\"info\" onClick={() => setCompleteModalOpen(open => !open)}>Complete</Button>\n                <DropdownToggle split className=\"border-left\" color=\"info\"/>\n                <DropdownMenu right>\n                    <DropdownItem onClick={() => {\n                        document.getElementById(\"new-item-name-input\")?.focus();\n                        scrollIntoView(\"new-item-form-card\");\n                        setNewItem({\n                            ...defaultNewItem,\n                            groups: [\n                                {\n                                    groupName: groups.find(group => group.id === group.id)!.name!,\n                                    groupId: group.id!\n                                }\n                            ]\n                        });\n                    }}>New Item</DropdownItem>\n                    <DropdownItem onClick={() => {\n                        setShowEditModal(true);\n                    }}>Edit Group</DropdownItem>\n                </DropdownMenu>\n            </ButtonDropdown>\n        );\n    }\n\n    function renderConfirmModal() {\n        return (\n            <ConfirmModal\n                abstract=\"Group Completion\"\n                specific=\"complete this group\"\n                dialogText={\"Checked non-recurring items will be deleted. Checked recurring items will just become unchecked. Unchecked items will not be affected.\"}\n                onConfirm={() => {\n                    completeGroup(group.id!).then(() => {\n                        setCompleteModalOpen(false);\n                    });\n                }}\n                isOpen={completeModalOpen}\n                toggle={() => setCompleteModalOpen(false)}\n            />\n        );\n    }\n}","import React from \"react\";\nimport {FiRepeat} from \"react-icons/fi\";\nimport ItemModel from \"../../../models/ItemModel\";\n\ninterface Props {\n    item: ItemModel;\n}\n\nexport const ItemLabel = ({item}: Props) => (\n    <label htmlFor={`checkbox_${item.id}`} className=\"custom-control-label\">\n        {item.name}\n        {item.recurring\n            ? <FiRepeat className=\"ml-1\" style={{paddingBottom: \"3px\"}}/>\n            : \"\"\n        }\n        {item.notes === \"\"\n            ? \"\"\n            : <small className=\"text-muted d-block\">{item.notes}</small>\n        }\n    </label>\n);","import React, {Fragment} from \"react\";\nimport ItemModel from \"../../../models/ItemModel\";\nimport {Input} from \"reactstrap\";\nimport {ItemLabel} from \"./ItemLabel\";\nimport {FaInfoCircle} from \"react-icons/fa\";\nimport {useStoreActions} from \"../../../store\";\n\ninterface Props {\n    item: ItemModel;\n}\n\nexport const Item = ({item}: Props) => {\n    const setFocusItem = useStoreActions(actions => actions.setFocusItem);\n    const toggleItemCheck = useStoreActions(actions => actions.toggleItemCheck);\n\n    return (\n        <Fragment>\n            <tr>\n                <td>\n                    <div className=\"custom-control custom-checkbox\">\n                        <Input\n                            id={`checkbox_${item.id}`}\n                            type=\"checkbox\"\n                            className=\"custom-control-input\"\n                            checked={item.checked}\n                            onChange={(event) => toggleItemCheck({\n                                itemId: item.id!,\n                                checked: event.target.checked\n                            })}\n                        />\n                        <ItemLabel item={item}/>\n                    </div>\n                </td>\n                <td>\n                    <FaInfoCircle\n                        style={{cursor: \"pointer\"}}\n                        onClick={() => setFocusItem(item)}\n                    />\n                </td>\n            </tr>\n        </Fragment>\n    )\n};\n\n","import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\nimport React from \"react\";\n\ninterface Props {\n    className?: string;\n}\n\nexport const LoadingSpinner = ({className}: Props) => (\n    <div className={className}>\n        <Loader\n            type=\"Bars\"\n            height={30}\n            color=\"#fff\"\n        />\n    </div>\n);\n","import React, {Fragment} from \"react\";\nimport {Item} from \"../Item/Item\";\nimport {Table} from \"reactstrap\";\nimport ItemModel from \"../../../models/ItemModel\";\nimport GroupModel from \"../../../models/GroupModel\";\nimport {LoadingSpinner} from \"../../LoadingSpinner/LoadingSpinner\";\nimport {useStoreState} from \"../../../store\";\n\ninterface Props {\n    group: GroupModel;\n}\n\nexport const GroupBody = ({group}: Props) => {\n\n    const items = useStoreState(state => state.items?.filter(item => (\n        item.groups.some(_group => _group.groupId === group.id)\n    )));\n\n    return (\n        <Fragment>\n            {items !== undefined\n                ?\n                <Table className=\"mb-0 same-width\" striped>\n                    <tbody>\n                    {items.map((item: ItemModel) => (\n                        <Item item={item} key={item.id}/>\n                    ))}\n                    </tbody>\n                </Table>\n                :\n                <LoadingSpinner className=\"my-3\"/>\n            }\n        </Fragment>\n    );\n};\n","import React, {Fragment} from \"react\";\nimport GroupModel from \"../../../models/GroupModel\";\nimport {Card} from \"reactstrap\";\nimport {GroupHeader} from \"./GroupHeader\";\nimport {GroupBody} from \"./GroupBody\";\n\ninterface Props {\n    group: GroupModel;\n}\n\nexport const Group = ({group}: Props) => {\n    return (\n        <Fragment>\n            <Card className=\"space-between\">\n                <GroupHeader\n                    group={group}\n                />\n                {group.visible !== false && (\n                    <GroupBody group={group}/>\n                )}\n            </Card>\n        </Fragment>\n    );\n};\n","import React, {Fragment, useEffect} from \"react\";\nimport {useStoreState, useStoreActions} from \"../../../store\";\nimport {Group} from \"./Group\";\n\nconst Groups = () => {\n\n    const groups = useStoreState(state => state.groups);\n    const fetchGroups = useStoreActions(actions => actions.fetchGroups);\n    const fetchItems = useStoreActions(actions => actions.fetchItems);\n\n    useEffect(  () => {\n        fetchGroups();\n        fetchItems();\n    }, [fetchGroups, fetchItems]);\n\n    return (\n        <Fragment>\n            {groups.map(group => (\n                <Group key={group.id} group={group} />\n            ))}\n        </Fragment>\n    );\n};\n\nexport default React.memo(Groups);","import React, {ChangeEvent, Component} from \"react\";\nimport {FormGroup, Input, Label} from \"reactstrap\";\n\ninterface Props {\n    checked: boolean;\n    handleChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    label: string;\n}\n\nexport default class CheckboxInput extends Component<Props, any> {\n    render() {\n        return (\n            <FormGroup check>\n                <Label check>\n                    <Input\n                        className=\"checkbox-lg\"\n                        checked={this.props.checked}\n                        onChange={this.props.handleChange}\n                        type=\"checkbox\"\n                    />\n                    <span className=\"pl-2\">{this.props.label}</span>\n                </Label>\n            </FormGroup>\n        );\n    }\n}\n","import React, {ChangeEvent, Fragment} from \"react\";\nimport {Label, FormGroup} from \"reactstrap\";\nimport {TextInput} from \"../../FormInput/TextInput\";\nimport CheckboxInput from \"../../FormInput/CheckboxInput\";\nimport ItemModel from \"../../../models/ItemModel\";\nimport {useStoreState} from \"../../../store\";\n\ninterface Props {\n    editedItem: ItemModel;\n    handleNameTextChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    handleNotesTextChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    handleRecurringCheckChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    handleGroupCheckChange: (event: ChangeEvent<HTMLInputElement>, groupId: number) => void;\n    handleFormSubmit: () => void;\n    formName: string;\n}\n\nexport const EditItemForm = (props: Props) => {\n\n    const groups = useStoreState(state => state.groups);\n\n    return (\n        <Fragment>\n            {renderNameInput()}\n            {renderNotesInput()}\n            {renderRecurringInput()}\n            {renderGroupsInput()}\n        </Fragment>\n    );\n\n    function renderNameInput() {\n        return (\n            <FormGroup>\n                <TextInput\n                    required\n                    label=\"Name\"\n                    id={`${props.formName}-name-input`}\n                    type=\"text\"\n                    value={props.editedItem.name}\n                    onChange={props.handleNameTextChange}\n                    placeholder=\"The name of the item...\"\n                    onKeyPress={(event) => {\n                        if (event.key === \"Enter\") {\n                            console.log(\"key press enter\")\n                            props.handleFormSubmit();\n                            event.preventDefault();\n                        }\n                    }}\n                />\n            </FormGroup>\n        );\n    }\n\n    function renderNotesInput() {\n        return (\n            <FormGroup>\n                <TextInput\n                    label=\"Notes\"\n                    id={`${props.formName}-notes-input`}\n                    type=\"textarea\"\n                    value={props.editedItem.notes}\n                    onChange={props.handleNotesTextChange}\n                    placeholder=\"Optional...\"\n                />\n            </FormGroup>\n        );\n    }\n\n    function renderRecurringInput() {\n        return (\n            <FormGroup>\n                <Label className=\"mb-0\">Recurring</Label>\n                <CheckboxInput\n                    checked={props.editedItem.recurring}\n                    handleChange={props.handleRecurringCheckChange}\n                    label=\"Item repeats\"\n                />\n            </FormGroup>\n        );\n    }\n\n    function renderGroupsInput() {\n        return (\n            <FormGroup>\n                <Label className=\"mb-0\">Groups</Label>\n                {groups.map(group => (\n                    <CheckboxInput\n                        key={group.id}\n                        checked={props.editedItem.groups.some(_group => _group.groupId === group.id)}\n                        handleChange={(event) => props.handleGroupCheckChange(event, group.id!)}\n                        label={group.name!}\n                    />\n                ))}\n            </FormGroup>\n        );\n    }\n}\n","import React, {Component} from \"react\";\nimport {Alert} from \"reactstrap\";\nimport {bsColor} from \"../../types\";\n\nexport interface AlertPanelProps {\n    color: bsColor;\n    text: string;\n}\n\ninterface State {\n    visible: boolean;\n}\n\n\nexport default class AlertPanel extends Component<AlertPanelProps, State> {\n    constructor(props: AlertPanelProps) {\n        super(props);\n\n        this.state = {\n            visible: true\n        };\n    }\n\n    render() {\n        return (\n            <Alert\n                className=\"mt-3\"\n                color={this.props.color}\n                isOpen={this.state.visible}\n                toggle={() => this.setState({visible: false})}\n            >\n                {this.props.text}\n            </Alert>\n        );\n    }\n}","import React, {Fragment, useEffect, useState} from \"react\";\nimport {Modal, ModalHeader, ModalBody, ModalFooter, Form, Button} from \"reactstrap\";\nimport {EditItemForm} from \"./EditItemForm\";\nimport {useStoreActions, useStoreState} from \"../../../store\";\nimport ItemModel from \"../../../models/ItemModel\";\nimport AlertPanel from \"../../Alerts/AlertPanel\";\nimport GroupModel from \"../../../models/GroupModel\";\nimport {validateEditItemForm} from \"./utils\";\n\nexport const EditItemModal = () => {\n\n    const focusItem = useStoreState(state => state.focusItem);\n    const setFocusItem = useStoreActions(actions => actions.setFocusItem);\n    const editItem = useStoreActions(actions => actions.editItem);\n    const deleteItem = useStoreActions(actions => actions.deleteItem);\n    const groups = useStoreState(state => state.groups);\n    const [validForm, setValidForm] = useState<boolean | null>(null);\n    const [alertPanelText, setAlertPanelText] = useState<string>(\"\");\n    const [showDeleteConfirm, setShowDeleteConfirm] = useState<boolean>(false);\n\n\n    const removeFocusItem = () => {\n        setFocusItem(null);\n    }\n\n    const [editedItem, setEditedItem] = useState<ItemModel>(focusItem!);\n\n    useEffect(() => {\n        setEditedItem(focusItem!);\n    }, [focusItem]);\n\n    return (\n        <Form>\n            {focusItem &&\n            <Fragment>\n                <Modal centered toggle={toggleModal} isOpen={true}>\n                    <ModalHeader toggle={toggleModal} className=\"d-flex\">\n                        {focusItem.name}\n                    </ModalHeader>\n                    <ModalBody>\n                        {renderAlert()}\n                        <EditItemForm\n                            formName=\"edit-item\"\n                            editedItem={editedItem}\n                            handleNameTextChange={event => setEditedItem({\n                                ...editedItem,\n                                name: event.target.value\n                            })}\n                            handleNotesTextChange={event => setEditedItem({\n                                ...editedItem,\n                                notes: event.target.value\n                            })}\n                            handleRecurringCheckChange={event => setEditedItem({\n                                ...editedItem,\n                                recurring: event.target.checked\n                            })}\n                            handleGroupCheckChange={(event, groupId) => {\n                                const newGroups: Array<{ groupId: number; groupName: string }> = [];\n                                groups.forEach((group: GroupModel) => {\n                                    if (group.id === groupId) {\n                                        if (event.target.checked) {\n                                            newGroups.push({groupId: group.id!, groupName: group.name!});\n                                        }\n                                    } else {\n                                        if (editedItem.groups.some(someGroup => someGroup.groupId === group.id)) {\n                                            newGroups.push({groupId: group.id!, groupName: group.name!});\n                                        }\n                                    }\n                                });\n                                setEditedItem({...editedItem, groups: newGroups});\n                            }}\n                            handleFormSubmit={handleFormSubmit}\n                        />\n                        {renderDeleteConfirmation()}\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button onClick={() => setShowDeleteConfirm(true)} className=\"mr-auto\" color=\"danger\">Delete</Button>\n                        <Button onClick={toggleModal} color=\"secondary\">Cancel</Button>\n                        <Button onClick={handleFormSubmit} type=\"submit\" color=\"info\">Submit</Button>\n                    </ModalFooter>\n                </Modal>\n            </Fragment>\n            }\n        </Form>\n    );\n\n    function toggleModal() {\n        removeFocusItem();\n        setValidForm(null);\n    }\n\n    function handleFormSubmit() {\n        const {isValid, alertText} = validateEditItemForm(editedItem);\n        setValidForm(isValid);\n        setAlertPanelText(alertText);\n\n        if (isValid) {\n            editItem(editedItem);\n            removeFocusItem();\n        }\n    }\n\n    function renderAlert() {\n        if (validForm === false) {\n            return (\n                <AlertPanel color=\"danger\" text={alertPanelText} />\n            );\n        }\n    }\n\n    function renderDeleteConfirmation() {\n        return (\n            <Modal isOpen={showDeleteConfirm} toggle={() => setShowDeleteConfirm(!showDeleteConfirm)}>\n                <ModalHeader toggle={() => setShowDeleteConfirm(!showDeleteConfirm)}>Confirm Item Deletion</ModalHeader>\n                <ModalBody>\n                    <p className=\"mb-0\">Are you sure you want to delete the item \"{focusItem?.name}\"?</p>\n                </ModalBody>\n                <ModalFooter>\n                    <Button onClick={() => setShowDeleteConfirm(false)} color=\"secondary\">No, cancel</Button>\n                    <Button onClick={confirmDelete} color=\"danger\">Yes, delete</Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n\n    function confirmDelete() {\n        deleteItem(focusItem!.id!);\n        setShowDeleteConfirm(false);\n        toggleModal();\n    }\n}\n","import React, {FormEvent, useState} from \"react\";\nimport {Button, FormGroup} from \"reactstrap\";\nimport GroupModel from \"../../../models/GroupModel\";\nimport {useStoreActions} from \"../../../store\";\nimport {TextInput} from \"../../FormInput/TextInput\";\n\n\nexport const NewGroupForm = () => {\n\n    const [newGroup, setNewGroup] = useState<GroupModel>({\n        name: \"\",\n        notes: \"\",\n        id: null,\n        visible: true\n    });\n\n    const saveGroup = useStoreActions(actions => actions.saveGroup);\n\n    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        await saveGroup(newGroup);\n        setNewGroup({...newGroup, name: \"\", notes: \"\"});\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <FormGroup>\n                <TextInput\n                    label=\"Name\"\n                    id=\"group-name-input\"\n                    type=\"text\"\n                    value={newGroup.name!}\n                    onChange={(event) => {\n                        setNewGroup({...newGroup, name: event.target.value});\n                    }}\n                    placeholder=\"The name of the group...\"\n                    required\n                />\n            </FormGroup>\n            <FormGroup>\n                <TextInput\n                    onChange={e => setNewGroup({...newGroup, notes: e.target.value})}\n                    type=\"textarea\"\n                    placeholder=\"Optional...\"\n                    id=\"group-notes-input\"\n                    label=\"Notes\"\n                    value={newGroup.notes!}\n                />\n            </FormGroup>\n            <FormGroup className=\"bottom-buttons\">\n                <Button block type=\"submit\" color=\"info\">Save</Button>\n            </FormGroup>\n        </form>\n    );\n}\n","import React, {useState} from \"react\";\nimport {Button, FormGroup} from \"reactstrap\";\nimport {useStoreActions, useStoreState} from \"../../../store\";\nimport {EditItemForm} from \"./EditItemForm\";\nimport AlertPanel from \"../../Alerts/AlertPanel\";\nimport {defaultNewItem, validateEditItemForm} from \"./utils\";\n\nexport const NewItemForm = () => {\n\n    const newItem = useStoreState(state => state.newItem);\n    const setNewItem = useStoreActions(actions => actions.setNewItem);\n\n    const groups = useStoreState(state => state.groups);\n    const saveItem = useStoreActions(actions => actions.saveItem)\n    const [validForm, setValidForm] = useState<boolean | null>(null);\n    const [alertPanelText, setAlertPanelText] = useState<string>(\"\");\n\n    return (\n        <form onSubmit={(event) => {\n            event.preventDefault();\n            handleSubmit();\n        }}>\n            {renderAlert()}\n            <EditItemForm\n                formName=\"new-item\"\n                editedItem={newItem}\n                handleNameTextChange={(event) => {\n                    setNewItem({...newItem, name: event.target.value});\n                }}\n                handleNotesTextChange={(event) => {\n                    setNewItem({...newItem, notes: event.target.value});\n                }}\n                handleRecurringCheckChange={(event) => {\n                    setNewItem({...newItem, recurring: event.target.checked});\n                }}\n                handleGroupCheckChange={((event, groupId) => {\n                    const newGroups = groups.filter(group => {\n                        if (group.id === groupId) {\n                            return event.target.checked;\n                        }\n                        return newItem.groups.some((someGroup: {groupId: number}) => someGroup.groupId === group.id);\n                    }).map(fullGroup => ({\n                        groupId: fullGroup.id!,\n                        groupName: fullGroup.name!\n                    }));\n                    setNewItem({\n                        ...newItem,\n                        groups: newGroups\n                    });\n                })}\n                handleFormSubmit={handleSubmit}\n            />\n            <FormGroup className=\"bottom-buttons\">\n                <Button block color=\"info\" type=\"submit\">Save</Button>\n            </FormGroup>\n        </form>\n    );\n\n    function renderAlert() {\n        if (validForm === false) {\n            return (\n                <AlertPanel color=\"danger\" text={alertPanelText} />\n            );\n        }\n    }\n\n    function handleSubmit() {\n        console.log(\"handling submit\");\n        const {isValid, alertText} = validateEditItemForm(newItem);\n        setValidForm(isValid);\n        setAlertPanelText(alertText);\n\n        if (isValid) {\n            saveItem(newItem).then(() => {\n                setNewItem(defaultNewItem);\n            });\n        }\n    }\n}","import React from \"react\";\n\ninterface Props {\n    children: JSX.Element[] | JSX.Element;\n}\n\nexport const StickyTop = ({children}: Props) => {\n    return (\n        <div className=\"sticky-top\" style={{zIndex: 10}}>\n            {children}\n        </div>\n    )\n}","import React, {Fragment, useState} from \"react\";\nimport Heading from \"../Heading/Heading\";\nimport {\n    Card,\n    Row,\n    Col,\n    CardBody,\n    CardHeader,\n    ButtonDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem\n} from \"reactstrap\";\nimport Groups from \"./Group/Groups\";\nimport {EditItemModal} from \"./Item/EditItemModal\";\nimport {NewGroupForm} from \"./Group/NewGroupForm\";\nimport {NewItemForm} from \"./Item/NewItemForm\";\nimport {scrollIntoView} from \"../../utils\";\nimport {StickyTop} from \"../Utils/StickyTop\";\n\nexport const ShoppingList = () => {\n\n    const ActionsDropdownMenu = () => {\n        const [showActionsDropdown, setShowActionsDropdown] = useState<boolean>(false);\n\n        const toggleDropdown = () => {\n            setShowActionsDropdown(!showActionsDropdown);\n        };\n\n        return (\n            <ButtonDropdown isOpen={showActionsDropdown} toggle={toggleDropdown}\n                            size=\"sm\" color=\"info\">\n                <DropdownToggle caret>\n                    Actions\n                </DropdownToggle>\n                <DropdownMenu right>\n                    <DropdownItem onClick={() => {\n                        scrollIntoView(\"new-item-form-card\");\n                    }}>New Item</DropdownItem>\n                    <DropdownItem onClick={() => {\n                        scrollIntoView(\"new-group-form-card\");\n                    }}>New Group</DropdownItem>\n                </DropdownMenu>\n            </ButtonDropdown>\n        );\n    }\n\n    return (\n        <Fragment>\n            <div>\n                <Heading title=\"Shopping List\">\n                    {ActionsDropdownMenu()}\n                </Heading>\n                <Row>\n                    <Col sm={12} lg={8}>\n                        <Groups/>\n                    </Col>\n                    <Col>\n                        <StickyTop>\n                            <Card id=\"new-item-form-card\" className=\"space-between mt-3 mt-lg-0\">\n                                <CardHeader>New Item</CardHeader>\n                                <CardBody className=\"pt-2\">\n                                    <NewItemForm/>\n                                </CardBody>\n                            </Card>\n                            <Card id=\"new-group-form-card\" className=\"space-between\">\n                                <CardHeader>New Group</CardHeader>\n                                <CardBody className=\"pt-2\">\n                                    <NewGroupForm/>\n                                </CardBody>\n                            </Card>\n                        </StickyTop>\n                    </Col>\n                </Row>\n            </div>\n            <EditItemModal/>\n        </Fragment>\n    )\n};\n\n","import React, {Fragment} from \"react\";\nimport AlertPanel from \"./AlertPanel\";\nimport {useStoreState} from \"../../store\";\n\nexport const Alerts = () => {\n    const alerts = useStoreState(state => state.alerts);\n\n    return (\n        <Fragment>\n            {alerts?.map(alert => (\n                <AlertPanel key={alert.text} color={alert.color} text={alert.text} />\n            ))}\n        </Fragment>\n    );\n}","import {Container, Row, Col} from \"reactstrap\";\nimport {ShoppingList} from \"./components/ShoppingList/ShoppingList\";\nimport React from \"react\";\nimport {StoreProvider} from \"easy-peasy\";\nimport {store} from \"./store\";\nimport {Alerts} from \"./components/Alerts/Alerts\";\n\nconst App = () => {\n\n    return (\n        <StoreProvider store={store}>\n            <Container className={\"main-container pt-0\"}>\n                <Row>\n                    <Col>\n                        <Alerts />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <ShoppingList/>\n                    </Col>\n                </Row>\n            </Container>\n        </StoreProvider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./main.css\";\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}