{"version":3,"sources":["components/Heading/Heading.tsx","api/alerts.ts","api/items.ts","store.ts","components/ShoppingList/Group/GroupHeader.tsx","components/ShoppingList/Item/ItemLabel.tsx","components/ShoppingList/Item/Item.tsx","components/LoadingSpinner/LoadingSpinner.tsx","components/ShoppingList/Group/GroupBody.tsx","components/ShoppingList/Group/Group.tsx","components/ShoppingList/Group/Groups.tsx","components/FormInput/TextInput.tsx","components/FormInput/CheckboxInput.tsx","components/ShoppingList/Item/EditItemModal/EditItemForm.tsx","components/AlertPanel/AlertPanel.tsx","components/ShoppingList/Item/EditItemModal/EditItemModal.tsx","components/ShoppingList/ShoppingList.tsx","App.tsx","index.tsx"],"names":["Heading","className","this","props","title","children","Component","alertsEndpoint","setAlert","text","color","a","axios","post","status","Promise","resolve","reject","setSuccessAlert","verbPastTense","noun","editItem","item","put","id","response","responseData","data","name","message","toggleItemCheck","itemId","checked","store","createStore","groups","setGroups","action","state","payload","fetchGroups","thunk","actions","get","res","addGroup","push","saveGroup","items","setItems","fetchItems","newItem","map","group","groupId","startTime","Date","now","then","console","log","timeDif","focusItem","setFocusItem","alerts","originalTime","typedHooks","createTypedHooks","useStoreActions","useStoreState","useStoreDispatch","GroupHeader","CardHeader","notes","Button","size","ItemLabel","htmlFor","recurring","style","paddingBottom","Item","Input","type","onChange","event","target","cursor","onClick","LoadingSpinner","height","GroupBody","filter","some","_group","undefined","Table","striped","Group","Card","Groups","useEffect","React","memo","TextInput","Label","label","value","onKeyPress","CheckboxInput","FormGroup","check","handleChange","EditItemForm","document","getElementById","focus","editedItem","handleNameTextChange","key","handleFormSubmit","handleNotesTextChange","handleRecurringCheckChange","handleGroupCheckChange","AlertPanel","visible","Alert","isOpen","toggle","setState","EditItemModal","useState","valid","setValid","validationText","setValidationText","removeFocusItem","setEditedItem","Form","Modal","centered","ModalHeader","ModalBody","newGroups","forEach","groupName","someGroup","length","ModalFooter","disabled","ShoppingList","ActionsDropdownMenu","Row","Col","sm","lg","CardBody","showActionsDropdown","setShowActionsDropdown","ButtonDropdown","DropdownToggle","caret","DropdownMenu","right","DropdownItem","App","Container","ReactDOM","render","Fragment"],"mappings":"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","file":"static/js/main.ca80a7ba.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n\ninterface HeadingProps {\n    title: string;\n}\n\nexport default class Heading extends Component<HeadingProps, any> {\n    render() {\n        return (\n            <div>\n                <div className=\"page-title\">\n                    <h4 className=\"title-text\">{this.props.title}</h4>\n                    <div className=\"right\">\n                        {this.props.children}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import axios from \"axios\";\n\nconst alertsEndpoint = \"/api/alerts/\";\n\nexport const getAlerts = async () => {\n    const response = await axios.get(alertsEndpoint);\n    return response.data;\n}\n\nexport const setAlert = async (text: string, color: string): Promise<void> => {\n    const response = await axios.post(alertsEndpoint,\n        {\n            text: text,\n            color: color\n        });\n    if (response.status === 200) {\n        await Promise.resolve();\n    } else {\n        await Promise.reject();\n    }\n}\n\nexport const setSuccessAlert = async (verbPastTense: string, noun: string): Promise<void> => {\n    const text = `Successfully ${verbPastTense} ${noun}.`;\n    await setAlert(text, \"success\");\n}","import axios from \"axios\";\nimport ItemModel from \"../models/ItemModel\";\nimport {setAlert, setSuccessAlert} from \"./alerts\";\n\nexport const getItem = async (itemId: number): Promise<ItemModel> => {\n    const response = await axios.get(`/api/items/${itemId}`);\n    return {\n        id: response.data.id,\n        name: response.data.name,\n        notes: response.data.notes,\n        checked: response.data.checked,\n        groups: response.data.groups,\n        recurring: response.data.recurring\n    };\n}\n\nexport interface ItemRequestModel extends Omit<ItemModel, \"groups\"> {\n    groups: Array<number>;\n}\n\nexport const editItem = async (item: ItemRequestModel): Promise<void> => {\n    try {\n        const response = await axios.put(`/api/items/edit/${item.id}`, item);\n        const responseData: ItemModel = response.data;\n        await setSuccessAlert(\"updated\", `item \"${responseData.name}\"`)\n    } catch(error) {\n        await setAlert(`Error in editItem api call: ${error.message}`, \"danger\");\n    }\n}\n\nexport const toggleItemCheck = async (itemId: number, checked: boolean): Promise<void> => {\n    try {\n        await axios.put(`/api/items/toggle/${itemId}`, {\"checked\": checked});\n    } catch (error) {\n        await setAlert(`Error in toggleItemCheck api call: ${error.message}`, \"danger\");\n    }\n}","import GroupModel from \"./models/GroupModel\";\nimport {action, Action, createStore, thunk, Thunk} from \"easy-peasy\";\nimport axios from \"axios\";\nimport {createTypedHooks} from \"easy-peasy\";\nimport AlertModel from \"./models/AlertModel\";\nimport ItemModel from \"./models/ItemModel\";\nimport {editItem, ItemRequestModel, toggleItemCheck} from \"./api/items\";\n\ninterface StoreModel {\n    groups: GroupModel[];\n    setGroups: Action<StoreModel, GroupModel[]>;\n    fetchGroups: Thunk<StoreModel>;\n    addGroup: Action<StoreModel, GroupModel>;\n    saveGroup: Thunk<StoreModel, GroupModel>;\n\n    items: ItemModel[] | null;\n    setItems: Action<StoreModel, ItemModel[]>;\n    fetchItems: Thunk<StoreModel>;\n    editItem: Action<StoreModel, ItemModel>;\n    toggleItemCheck: Action<StoreModel, {itemId: number, checked: boolean}>;\n    focusItem: ItemModel | null;\n    setFocusItem: Action<StoreModel, ItemModel | null>;\n\n    alerts: AlertModel[];\n}\n\nexport const store = createStore<StoreModel>({\n    groups: [],\n    setGroups: action((state, payload) => {\n        state.groups = payload;\n    }),\n    fetchGroups: thunk(async (actions) => {\n        const res = await axios.get(\"/api/groups/\");\n        actions.setGroups(res.data);\n    }),\n    addGroup: action((state, payload) => {\n        state.groups.push(payload);\n    }),\n    saveGroup: thunk(async (actions, payload) => {\n        const res = await axios.post(\"/api/groups/\", payload);\n        actions.addGroup(res.data);\n    }),\n\n    items: null,\n    setItems: action((state, payload) => {\n        state.items = payload;\n    }),\n    fetchItems: thunk(async (actions) => {\n        const res = await axios.get(\"/api/items/\");\n        actions.setItems(res.data);\n    }),\n    editItem: action((state, payload) => {\n        const newItem: ItemRequestModel = {\n            ...payload,\n            groups: payload.groups.map(group => group.groupId)\n        };\n        state.items = state.items!.map((item: ItemModel) => {\n            if (item.id === newItem.id) {\n                return payload;\n            }\n            return item;\n        });\n        const startTime = Date.now();\n        editItem(newItem).then(() => {\n            console.log(`Item edited. Response time: ${timeDif(startTime)}s`);\n        });\n    }),\n    toggleItemCheck: action((state, payload) => {\n        const startTime = Date.now();\n        state.items = state.items!.map((item: ItemModel) => {\n            if (item.id === payload.itemId) {\n                item.checked = payload.checked;\n                return item;\n            }\n            return item;\n        });\n        toggleItemCheck(payload.itemId, payload.checked).then(() => {\n            console.log(`Item ${payload.checked ? \"\" : \"un\"}checked. Response time: ${timeDif(startTime)}s`);\n        });\n    }),\n    focusItem: null,\n    setFocusItem: action((state, payload) => {\n        state.focusItem = payload;\n    }),\n\n    alerts: [],\n});\n\nconst timeDif = (originalTime: number) => {\n    return (Date.now() - originalTime) / 1000;\n}\n\nconst typedHooks = createTypedHooks<StoreModel>();\n\nexport const useStoreActions = typedHooks.useStoreActions;\nexport const useStoreDispatch = typedHooks.useStoreDispatch;\nexport const useStoreState = typedHooks.useStoreState;\n","import React, {Component} from \"react\";\nimport {Button, CardHeader} from \"reactstrap\";\n\ninterface Props {\n    name: string;\n    notes: string;\n}\n\nexport default class GroupHeader extends Component<Props, any> {\n    render() {\n        return (\n            <CardHeader className=\"d-flex\">\n                <div className=\"d-block mt-auto\">\n                    {this.props.name}\n                    {this.props.notes === \"\"\n                        ? \"\"\n                        : <small className=\"d-block text-muted\">{this.props.notes}</small>}\n                </div>\n                <div className=\"my-auto ml-auto\">\n                    <Button size=\"sm\" color=\"info\">Complete</Button>\n                </div>\n            </CardHeader>\n        );\n    }\n}\n","import React from \"react\";\nimport {FiRepeat} from \"react-icons/fi\";\nimport ItemModel from \"../../../models/ItemModel\";\n\ninterface Props {\n    item: ItemModel;\n}\n\nexport const ItemLabel = ({item}: Props) => (\n    <label htmlFor={`checkbox_${item.id}`} className=\"custom-control-label\">\n        {item.name}\n        {item.recurring\n            ? <FiRepeat className=\"ml-1\" style={{paddingBottom: \"3px\"}}/>\n            : \"\"\n        }\n        {item.notes === \"\"\n            ? \"\"\n            : <small className=\"text-muted d-block\">{item.notes}</small>\n        }\n    </label>\n);","import React, {Fragment} from \"react\";\nimport ItemModel from \"../../../models/ItemModel\";\nimport {Input} from \"reactstrap\";\nimport {ItemLabel} from \"./ItemLabel\";\nimport {FaInfoCircle} from \"react-icons/fa\";\nimport {useStoreActions} from \"../../../store\";\n\ninterface Props {\n    item: ItemModel;\n}\n\nexport const Item = ({item}: Props) => {\n    const setFocusItem = useStoreActions(actions => actions.setFocusItem);\n    const toggleItemCheck = useStoreActions(actions => actions.toggleItemCheck);\n\n    return (\n        <Fragment>\n            <tr>\n                <td>\n                    <div className=\"custom-control custom-checkbox\">\n                        <Input\n                            id={`checkbox_${item.id}`}\n                            type=\"checkbox\"\n                            className=\"custom-control-input\"\n                            checked={item.checked}\n                            onChange={(event) => toggleItemCheck({\n                                itemId: item.id!,\n                                checked: event.target.checked\n                            })}\n                        />\n                        <ItemLabel item={item}/>\n                    </div>\n                </td>\n                <td>\n                    <FaInfoCircle\n                        style={{cursor: \"pointer\"}}\n                        onClick={() => setFocusItem(item)}\n                    />\n                </td>\n            </tr>\n        </Fragment>\n    )\n};\n\n","import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\nimport React from \"react\";\n\ninterface Props {\n    className?: string;\n}\n\nexport const LoadingSpinner = ({className}: Props) => (\n    <div className={className}>\n        <Loader\n            type=\"Bars\"\n            height={30}\n            color=\"#fff\"\n        />\n    </div>\n);\n","import React, {Component, Fragment} from \"react\";\nimport {Item} from \"../Item/Item\";\nimport {Table} from \"reactstrap\";\nimport ItemModel from \"../../../models/ItemModel\";\nimport GroupModel from \"../../../models/GroupModel\";\nimport {LoadingSpinner} from \"../../LoadingSpinner/LoadingSpinner\";\nimport {useStoreState} from \"../../../store\";\n\ninterface Props {\n    group: GroupModel;\n}\n\nexport const GroupBody = ({group}: Props) => {\n\n    const items = useStoreState(state => state.items?.filter(item => (\n        item.groups.some(_group => _group.groupId === group.id)\n    )));\n\n    return (\n        <Fragment>\n            {items !== undefined\n                ?\n                <Table className=\"mb-0 same-width\" striped>\n                    <tbody>\n                    {items.map((item: ItemModel) => (\n                        <Item item={item} key={item.id}/>\n                    ))}\n                    </tbody>\n                </Table>\n                :\n                <LoadingSpinner className=\"my-3\"/>\n            }\n        </Fragment>\n    );\n};\n","import React, {Fragment} from \"react\";\nimport GroupModel from \"../../../models/GroupModel\";\nimport {Card} from \"reactstrap\";\nimport GroupHeader from \"./GroupHeader\";\nimport {GroupBody} from \"./GroupBody\";\n\ninterface Props {\n    group: GroupModel;\n}\n\nexport const Group = ({group}: Props) => {\n    return (\n        <Fragment>\n            <Card className=\"space-between\">\n                <GroupHeader\n                    name={group.name!}\n                    notes={group.notes!}\n                />\n                <GroupBody group={group}/>\n            </Card>\n        </Fragment>\n    );\n};\n","import React, {Fragment, useEffect} from \"react\";\nimport {useStoreState, useStoreActions} from \"../../../store\";\nimport {Group} from \"./Group\";\n\nconst Groups = () => {\n\n    const groups = useStoreState(state => state.groups);\n    const fetchGroups = useStoreActions(actions => actions.fetchGroups);\n    const fetchItems = useStoreActions(actions => actions.fetchItems);\n\n    useEffect(  () => {\n        fetchGroups();\n        fetchItems();\n    }, [fetchGroups, fetchItems]);\n\n    return (\n        <Fragment>\n            {groups.map(group => (\n                <Group key={group.id} group={group} />\n            ))}\n        </Fragment>\n    );\n};\n\nexport default React.memo(Groups);","import React, {ChangeEvent, Component, KeyboardEvent, Fragment} from \"react\";\nimport {Input, Label} from \"reactstrap\";\n\ninterface Props {\n    label: string;\n    id: string;\n    type: \"text\" | \"textarea\";\n    value: string;\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    onKeyPress?: (event: KeyboardEvent<HTMLInputElement>) => void;\n}\n\nexport default class TextInput extends Component<Props, any> {\n    render() {\n        return (\n            <Fragment>\n                <Label htmlFor={this.props.id}>{this.props.label}</Label>\n                <Input\n                    id={this.props.id}\n                    type={this.props.type}\n                    value={this.props.value}\n                    onChange={this.props.onChange}\n                    onKeyPress={this.props.onKeyPress}\n                />\n            </Fragment>\n        );\n    }\n}","import React, {ChangeEvent, Component} from \"react\";\nimport {FormGroup, Input, Label} from \"reactstrap\";\n\ninterface Props {\n    checked: boolean;\n    handleChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    label: string;\n}\n\nexport default class CheckboxInput extends Component<Props, any> {\n    render() {\n        return (\n            <FormGroup check>\n                <Label check>\n                    <Input\n                        checked={this.props.checked}\n                        onChange={this.props.handleChange}\n                        type=\"checkbox\"\n                    />\n                    {this.props.label}\n                </Label>\n            </FormGroup>\n        );\n    }\n}\n","import React, {ChangeEvent, Fragment, useEffect} from \"react\";\nimport {Label, FormGroup} from \"reactstrap\";\nimport TextInput from \"../../../FormInput/TextInput\";\nimport CheckboxInput from \"../../../FormInput/CheckboxInput\";\nimport ItemModel from \"../../../../models/ItemModel\";\nimport {useStoreState} from \"../../../../store\";\n\ninterface Props {\n    editedItem: ItemModel;\n    handleNameTextChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    handleNotesTextChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    handleRecurringCheckChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    handleGroupCheckChange: (event: ChangeEvent<HTMLInputElement>, groupId: number) => void;\n    handleFormSubmit: () => void;\n}\n\nexport const EditItemForm = (props: Props) => {\n\n    useEffect(() => {\n        document.getElementById(\"name-input\")?.focus();\n    });\n\n    const groups = useStoreState(state => state.groups);\n\n    return (\n        <Fragment>\n            {renderNameInput()}\n            {renderNotesInput()}\n            {renderRecurringInput()}\n            {renderGroupsInput()}\n        </Fragment>\n    );\n\n\n    function renderNameInput() {\n        return (\n            <FormGroup>\n                <TextInput\n                    label=\"Name\"\n                    id=\"name-input\"\n                    type=\"text\"\n                    value={props.editedItem.name}\n                    onChange={props.handleNameTextChange}\n                    onKeyPress={(event) => {\n                        if (event.key === \"Enter\") {\n                            props.handleFormSubmit();\n                        }\n                    }}\n                />\n            </FormGroup>\n        );\n    }\n\n    function renderNotesInput() {\n        return (\n            <FormGroup>\n                <TextInput\n                    label=\"Notes\"\n                    id=\"notes-input\"\n                    type=\"textarea\"\n                    value={props.editedItem.notes}\n                    onChange={props.handleNotesTextChange}\n                />\n            </FormGroup>\n        );\n    }\n\n    function renderRecurringInput() {\n        return (\n            <FormGroup>\n                <Label className=\"mb-0\">Recurring</Label>\n                <CheckboxInput\n                    checked={props.editedItem.recurring}\n                    handleChange={props.handleRecurringCheckChange}\n                    label=\"Item repeats\"\n                />\n            </FormGroup>\n        );\n    }\n\n    function renderGroupsInput() {\n        return (\n            <FormGroup>\n                <Label className=\"mb-0\">Groups</Label>\n                {groups.map(group => (\n                    <CheckboxInput\n                        key={group.id}\n                        checked={props.editedItem.groups.some(_group => _group.groupId === group.id)}\n                        handleChange={(event) => props.handleGroupCheckChange(event, group.id!)}\n                        label={group.name!}\n                    />\n                ))}\n            </FormGroup>\n        );\n    }\n}\n","import React, {Component} from \"react\";\nimport {Alert} from \"reactstrap\";\n\nexport interface AlertPanelProps {\n    color: string;\n    text: string;\n}\n\ninterface State {\n    visible: boolean;\n}\n\n\nexport default class AlertPanel extends Component<AlertPanelProps, State> {\n    constructor(props: AlertPanelProps) {\n        super(props);\n\n        this.state = {\n            visible: true\n        };\n    }\n\n    render() {\n        return (\n            <Alert\n                className=\"mt-3\"\n                color={this.props.color}\n                isOpen={this.state.visible}\n                toggle={() => this.setState({visible: false})}\n            >\n                {this.props.text}\n            </Alert>\n        );\n    }\n}","import React, {Fragment, useCallback, useEffect, useState} from \"react\";\nimport {Modal, ModalHeader, ModalBody, ModalFooter, Form, Button} from \"reactstrap\";\nimport {EditItemForm} from \"./EditItemForm\";\nimport {useStoreActions, useStoreState} from \"../../../../store\";\nimport ItemModel from \"../../../../models/ItemModel\";\nimport AlertPanel from \"../../../AlertPanel/AlertPanel\";\nimport GroupModel from \"../../../../models/GroupModel\";\n\nexport const EditItemModal = () => {\n\n    const focusItem = useStoreState(state => state.focusItem);\n    const setFocusItem = useStoreActions(actions => actions.setFocusItem);\n    const editItem = useStoreActions(actions => actions.editItem);\n    const groups = useStoreState(state => state.groups);\n    const [valid, setValid] = useState<boolean>(true);\n    const [validationText, setValidationText] = useState<string>(\"\");\n\n    const removeFocusItem = () => {\n        setFocusItem(null);\n        setValid(true);\n    }\n\n    const [editedItem, setEditedItem] = useState<ItemModel>(focusItem!);\n\n    useEffect(() => {\n        setEditedItem(focusItem!);\n    }, [focusItem]);\n\n    function handleFormSubmit() {\n        if (valid) {\n            editItem(editedItem);\n            removeFocusItem();\n        }\n    }\n\n    return (\n        <Form>\n            {focusItem &&\n            <Fragment>\n                <Modal centered toggle={removeFocusItem} isOpen={true}>\n                    <ModalHeader toggle={removeFocusItem} className=\"d-flex\">\n                        {focusItem.name}\n                    </ModalHeader>\n                    <ModalBody>\n                        {!valid &&\n                        <AlertPanel color=\"danger\" text={validationText}/>\n                        }\n                        <EditItemForm\n                            editedItem={editedItem}\n                            handleNameTextChange={event => setEditedItem({\n                                ...editedItem,\n                                name: event.target.value\n                            })}\n                            handleNotesTextChange={event => setEditedItem({\n                                ...editedItem,\n                                notes: event.target.value\n                            })}\n                            handleRecurringCheckChange={event => setEditedItem({\n                                ...editedItem,\n                                recurring: event.target.checked\n                            })}\n                            handleGroupCheckChange={(event, groupId) => {\n                                const newGroups: Array<{ groupId: number; groupName: string }> = [];\n                                groups.forEach((group: GroupModel) => {\n                                    if (group.id === groupId) {\n                                        if (event.target.checked) {\n                                            newGroups.push({groupId: group.id!, groupName: group.name!});\n                                        }\n                                    } else {\n                                        if (editedItem.groups.some(someGroup => someGroup.groupId === group.id)) {\n                                            newGroups.push({groupId: group.id!, groupName: group.name!});\n                                        }\n                                    }\n                                });\n                                setEditedItem({...editedItem, groups: newGroups});\n                                if (newGroups.length < 1) {\n                                    setValid(false);\n                                    setValidationText(\"Each item must be in at least one group.\")\n                                } else {\n                                    setValid(true);\n                                }\n                            }}\n                            handleFormSubmit={handleFormSubmit}\n                        />\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button onClick={removeFocusItem} color=\"secondary\">Cancel</Button>\n                        <Button disabled={!valid} onClick={handleFormSubmit} type=\"submit\" color=\"info\">Submit</Button>\n                    </ModalFooter>\n                </Modal>\n            </Fragment>\n            }\n        </Form>\n    );\n\n}\n","import React, {Fragment, useState} from \"react\";\nimport Heading from \"../Heading/Heading\";\nimport {\n    Card,\n    Row,\n    Col,\n    CardBody,\n    CardHeader,\n    ButtonDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem\n} from \"reactstrap\";\nimport Groups from \"./Group/Groups\";\nimport {EditItemModal} from \"./Item/EditItemModal/EditItemModal\";\n\nexport const ShoppingList = () => {\n    return (\n        <Fragment>\n            <div>\n                <Heading title=\"Shopping List\">\n                    {ActionsDropdownMenu()}\n                </Heading>\n                <Row>\n                    <Col sm={12} lg={8}>\n                        <Groups />\n                    </Col>\n                    <Col>\n                        <Card className=\"space-between mt-3 mt-lg-0\">\n                            <CardHeader>New Item</CardHeader>\n                            <CardBody>Form</CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n            <EditItemModal />\n        </Fragment>\n    )\n};\n\nconst ActionsDropdownMenu = () => {\n    const [showActionsDropdown, setShowActionsDropdown] = useState<boolean>(false);\n\n    const toggleDropdown = () => {\n        setShowActionsDropdown(!showActionsDropdown);\n    }\n\n    return (\n        <ButtonDropdown isOpen={showActionsDropdown} toggle={toggleDropdown}\n                        size=\"sm\" color=\"info\">\n            <DropdownToggle caret>\n                Actions\n            </DropdownToggle>\n            <DropdownMenu right>\n                <DropdownItem>Test</DropdownItem>\n                <DropdownItem>Test</DropdownItem>\n            </DropdownMenu>\n        </ButtonDropdown>\n    );\n}","import {Container, Row, Col} from \"reactstrap\";\nimport {ShoppingList} from \"./components/ShoppingList/ShoppingList\";\nimport React from \"react\";\nimport {StoreProvider} from \"easy-peasy\";\nimport {store} from \"./store\";\n\nconst App = () => {\n\n    return (\n        <StoreProvider store={store}>\n            <Container className={\"main-container pt-0\"}>\n                <Row>\n                    <Col>\n                        {/*{alerts.map(alert => (*/}\n                        {/*    <AlertPanel color={alert.color} text={alert.text} key={alert.text}/>*/}\n                        {/*))}*/}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <ShoppingList/>\n                    </Col>\n                </Row>\n            </Container>\n        </StoreProvider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./main.css\";\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}