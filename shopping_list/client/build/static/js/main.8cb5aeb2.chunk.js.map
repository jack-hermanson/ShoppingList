{"version":3,"sources":["components/AlertPanel/AlertPanel.tsx","components/Heading/Heading.tsx","api/groups.ts","components/ShoppingList/Group/GroupHeader.tsx","components/ShoppingList/Item/ItemLabel.tsx","api/alerts.ts","api/items.ts","components/ShoppingList/Item/Item.tsx","components/FormInput/TextInput.tsx","components/FormInput/CheckboxInput.tsx","components/ShoppingList/Item/EditItemModal/EditItemForm.tsx","components/ShoppingList/Item/EditItemModal/EditItemModal.tsx","components/ShoppingList/Group/GroupBody.tsx","components/ShoppingList/Group/Group.tsx","components/ShoppingList/ShoppingList.tsx","App.tsx","index.tsx"],"names":["AlertPanel","props","state","visible","Alert","className","color","this","isOpen","toggle","setState","text","Component","Heading","title","children","getGroup","groupId","a","axios","get","response","id","data","name","notes","getGroupIds","getGroupItemIds","GroupHeader","CardHeader","Button","size","ItemLabel","htmlFor","item","recurring","style","paddingBottom","alertsEndpoint","getAlerts","setAlert","post","status","Promise","resolve","reject","setSuccessAlert","verbPastTense","noun","getItem","itemId","checked","groups","getItemGroupIds","output","forEach","group","push","editItem","requestItem","put","responseData","Item","prevProps","prevState","snapshot","reRenderItem","resetEditedItemId","Input","type","onChange","console","log","cursor","onClick","toggleEditItemModal","colSpan","TextInput","FormGroup","Label","label","value","CheckboxInput","check","handleChange","EditItemForm","renderNameInput","renderNotesInput","renderRecurringInput","handleNameTextChange","handleNotesTextChange","handleRecurringCheckChange","EditItemModal","bind","submitForm","Form","Modal","centered","closeEditModal","showEditModal","ModalHeader","ModalBody","renderEditItemForm","ModalFooter","event","target","submitEditItem","GroupBody","showEditItemModal","itemToEdit","editedItemId","loading","Table","striped","itemIds","map","renderEditItemModal","fetchNewAlerts","Group","finishLoading","Card","CardBody","groupItemIds","ShoppingList","actionsDropdownOpen","groupIds","ButtonDropdown","toggleActionsMenu","DropdownToggle","caret","DropdownMenu","right","DropdownItem","Row","Col","sm","lg","App","alerts","Container","alert","ReactDOM","render","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.8cb5aeb2.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport {Alert} from \"reactstrap\";\n\nexport interface AlertPanelProps {\n    color: string;\n    text: string;\n}\n\ninterface State {\n    visible: boolean;\n}\n\n\nexport default class AlertPanel extends Component<AlertPanelProps, State> {\n    constructor(props: AlertPanelProps) {\n        super(props);\n\n        this.state = {\n            visible: true\n        };\n    }\n\n    render() {\n        return (\n            <Alert\n                className=\"mt-3\"\n                color={this.props.color}\n                isOpen={this.state.visible}\n                toggle={() => this.setState({visible: false})}\n            >\n                {this.props.text}\n            </Alert>\n        );\n    }\n}","import React, {Component} from \"react\";\n\ninterface HeadingProps {\n    title: string;\n}\n\nexport default class Heading extends Component<HeadingProps, any> {\n    render() {\n        return (\n            <div>\n                <div className=\"page-title\">\n                    <h4 className=\"title-text\">{this.props.title}</h4>\n                    <div className=\"right\">\n                        {this.props.children}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import axios from \"axios\";\nimport GroupModel from \"../models/GroupModel\";\n\n\nexport const getGroup = async (groupId: number): Promise<GroupModel> => {\n    const response = await axios.get(`/api/groups/${groupId}`);\n    return {\n        id: response.data.id,\n        name: response.data.name,\n        notes: response.data.notes\n    };\n};\n\nexport const getGroups = async (): Promise<Array<GroupModel>> => {\n    const response = await axios.get(\"/api/groups/\");\n    return response.data;\n};\n\nexport const getGroupIds = async(): Promise<Array<number>> => {\n    const response = await axios.get(\"/api/groups/ids/\");\n    return response.data;\n};\n\nexport const getGroupItemIds = async (groupId: number): Promise<Array<number>> => {\n    const response = await axios.get(`/api/items/group/${groupId}`);\n    return response.data;\n}","import React, {Component} from \"react\";\nimport {Button, CardHeader} from \"reactstrap\";\n\ninterface Props {\n    name: string;\n    notes: string;\n}\n\nexport default class GroupHeader extends Component<Props, any> {\n    render() {\n        return (\n            <CardHeader className=\"d-flex\">\n                <div className=\"d-block mt-auto\">\n                    {this.props.name}\n                    {this.props.notes === \"\"\n                        ? \"\"\n                        : <small className=\"d-block text-muted\">{this.props.notes}</small>}\n                </div>\n                <div className=\"my-auto ml-auto\">\n                    <Button size=\"sm\" color=\"info\">Complete</Button>\n                </div>\n            </CardHeader>\n        );\n    }\n}\n","import React, {Component} from \"react\";\nimport {FiRepeat} from \"react-icons/fi\";\nimport ItemModel from \"../../../models/ItemModel\";\n\ninterface Props {\n    item: ItemModel;\n}\n\nexport default class ItemLabel extends Component<Props, any> {\n    render() {\n        return (\n            <label htmlFor={`checkbox_${this.props.item.id}`} className=\"custom-control-label\">\n                {this.props.item.name}\n                {this.props.item.recurring\n                    ? <FiRepeat className=\"ml-1\" style={{paddingBottom: \"3px\"}}/>\n                    : \"\"\n                }\n                {this.props.item.notes === \"\"\n                    ? \"\"\n                    : <small className=\"text-muted d-block\">{this.props.item.notes}</small>\n                }\n            </label>\n        );\n    }\n}","import axios from \"axios\";\n\nconst alertsEndpoint = \"/api/alerts/\";\n\nexport const getAlerts = async () => {\n    const response = await axios.get(alertsEndpoint);\n    return response.data;\n}\n\nexport const setAlert = async (text: string, color: string): Promise<void> => {\n    const response = await axios.post(alertsEndpoint,\n        {\n            text: text,\n            color: color\n        });\n    if (response.status === 200) {\n        await Promise.resolve();\n    } else {\n        await Promise.reject();\n    }\n}\n\nexport const setSuccessAlert = async (verbPastTense: string, noun: string): Promise<void> => {\n    const text = `Successfully ${verbPastTense} ${noun}.`;\n    await setAlert(text, \"success\");\n}","import axios from \"axios\";\nimport ItemModel from \"../models/ItemModel\";\nimport {setAlert, setSuccessAlert} from \"./alerts\";\n\nexport const getItem = async (itemId: number): Promise<ItemModel> => {\n    const response = await axios.get(`/api/items/${itemId}`);\n    return {\n        id: response.data.id,\n        name: response.data.name,\n        notes: response.data.notes,\n        checked: response.data.checked,\n        groups: response.data.groups,\n        recurring: response.data.recurring\n    };\n}\n\nconst getItemGroupIds = (item: ItemModel): Array<number> => {\n    let output: Array<number> = [];\n    item.groups.forEach(group => {\n        output.push(group.groupId);\n    });\n    return output;\n}\n\ninterface ItemRequestModel extends Omit<ItemModel, \"groups\"> {\n    groups: Array<number>;\n}\n\nexport const editItem = async (item: ItemModel): Promise<void> => {\n    const requestItem: ItemRequestModel = {...item, groups: getItemGroupIds(item)};\n    try {\n        const response = await axios.put(`/api/items/edit/${item.id}`, requestItem);\n        const responseData: ItemModel = response.data;\n        await setSuccessAlert(\"updated\", `item \"${responseData.name}\"`)\n    } catch(error) {\n        throw error;\n    }\n}","import React, {Component, Fragment} from \"react\";\nimport ItemModel from \"../../../models/ItemModel\";\nimport {Input} from \"reactstrap\";\nimport {FaInfoCircle} from \"react-icons/fa\";\nimport ItemLabel from \"./ItemLabel\";\nimport {getItem} from \"../../../api/items\";\n\ninterface Props {\n    itemId: number;\n    toggleEditItemModal: (item: ItemModel) => void;\n    reRenderItem: boolean;\n    resetEditedItemId: () => void;\n}\n\ninterface State {\n    item: ItemModel | null;\n}\n\nexport default class Item extends Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            item: null\n        }\n    }\n\n    async componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any) {\n        if (this.props.reRenderItem && this.props.reRenderItem !== prevProps.reRenderItem) {\n            this.setState({\n                item: await getItem(this.props.itemId)\n            });\n            this.props.resetEditedItemId();\n        }\n    }\n\n    async componentDidMount() {\n        const item: ItemModel = await getItem(this.props.itemId);\n        this.setState({item: item});\n    }\n\n    render() {\n        if (this.state.item !== null) {\n            return (\n                <Fragment>\n                    <tr>\n                        <td>\n                            <div className=\"custom-control custom-checkbox\">\n                                <Input\n                                    id={`checkbox_${this.state.item.id}`}\n                                    type=\"checkbox\"\n                                    className=\"custom-control-input\"\n                                    checked={this.state.item.checked}\n                                    onChange={() => console.log(\"check toggle\")}\n                                />\n                                <ItemLabel item={this.state.item}/>\n                            </div>\n                        </td>\n                        <td>\n                            <FaInfoCircle\n                                style={{cursor: \"pointer\"}}\n                                onClick={() => this.props.toggleEditItemModal(this.state.item as ItemModel)}\n                            />\n                        </td>\n                    </tr>\n                </Fragment>\n            );\n        } else {\n            return (\n                <tr>\n                    <td colSpan={2}>Loading item...</td>\n                </tr>\n            );\n        }\n\n    }\n\n}","import React, {ChangeEvent, Component} from \"react\";\nimport {FormGroup, Input, Label} from \"reactstrap\";\n\ninterface Props {\n    label: string;\n    id: string;\n    type: \"text\" | \"textarea\";\n    value: string;\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport default class TextInput extends Component<Props, any> {\n    render() {\n        return (\n            <FormGroup>\n                <Label htmlFor={this.props.id}>{this.props.label}</Label>\n                <Input\n                    id={this.props.id}\n                    type={this.props.type}\n                    value={this.props.value}\n                    onChange={this.props.onChange}\n                />\n            </FormGroup>\n        );\n    }\n}","import React, {ChangeEvent, Component} from \"react\";\nimport {FormGroup, Input, Label} from \"reactstrap\";\n\ninterface Props {\n    checked: boolean;\n    handleChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    label: string;\n}\n\nexport default class CheckboxInput extends Component<Props, any> {\n    render() {\n        return (\n            <FormGroup check>\n                <Label check>\n                    <Input\n                        checked={this.props.checked}\n                        onChange={this.props.handleChange}\n                        type=\"checkbox\"\n                    />\n                    {this.props.label}\n                </Label>\n            </FormGroup>\n        );\n    }\n}\n","import React, {ChangeEvent, Component, Fragment} from \"react\";\nimport {FormGroup, Input, Label} from \"reactstrap\";\nimport TextInput from \"../../../FormInput/TextInput\";\nimport CheckboxInput from \"../../../FormInput/CheckboxInput\";\n\ninterface Props {\n    name: string;\n    notes: string;\n    recurring: boolean;\n    handleNameTextChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    handleNotesTextChange: (event: ChangeEvent<HTMLInputElement>) => void;\n    handleRecurringCheckChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport default class EditItemForm extends Component<Props, any> {\n    render() {\n        return (\n            <Fragment>\n                {this.renderNameInput()}\n                {this.renderNotesInput()}\n                {this.renderRecurringInput()}\n            </Fragment>\n        );\n    }\n\n    renderNameInput() {\n        return (\n            <TextInput\n                label=\"Name\"\n                id=\"name-input\"\n                type=\"text\"\n                value={this.props.name}\n                onChange={this.props.handleNameTextChange}\n            />\n        );\n    }\n\n    renderNotesInput() {\n        return (\n            <TextInput\n                label=\"Notes\"\n                id=\"notes-input\"\n                type=\"textarea\"\n                value={this.props.notes}\n                onChange={this.props.handleNotesTextChange}\n            />\n        );\n    }\n\n    renderRecurringInput() {\n        return (\n            <Fragment>\n                <Label className=\"mb-0\">Recurring</Label>\n                <CheckboxInput\n                    checked={this.props.recurring}\n                    handleChange={this.props.handleRecurringCheckChange}\n                    label=\"Item repeats\"\n                />\n            </Fragment>\n        )\n    }\n}\n","import React, {ChangeEvent, Component} from \"react\";\nimport ItemModel from \"../../../../models/ItemModel\";\nimport {Modal, ModalHeader, ModalBody, ModalFooter, Form, Button} from \"reactstrap\";\nimport EditItemForm from \"./EditItemForm\";\nimport {editItem} from \"../../../../api/items\";\n\ninterface Props {\n    showEditModal: boolean;\n    closeEditModal: () => void;\n    item: ItemModel;\n    submitEditItem: (itemId: number) => void;\n}\n\nexport default class EditItemModal extends Component<Props, ItemModel> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            id: this.props.item.id,\n            name: this.props.item.name,\n            notes: this.props.item.notes,\n            recurring: this.props.item.recurring,\n            groups: this.props.item.groups,\n            checked: this.props.item.checked\n        };\n\n        this.handleNameTextChange = this.handleNameTextChange.bind(this);\n        this.handleNotesTextChange = this.handleNotesTextChange.bind(this);\n        this.handleRecurringCheckChange = this.handleRecurringCheckChange.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n    }\n\n\n    render() {\n        return (\n            <Form>\n                <Modal centered toggle={this.props.closeEditModal} isOpen={this.props.showEditModal}>\n                    <ModalHeader toggle={this.props.closeEditModal} className=\"d-flex\">\n                        {this.props.item.name}\n                    </ModalHeader>\n                    <ModalBody>\n                        {this.renderEditItemForm()}\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button onClick={this.props.closeEditModal} color=\"secondary\">Cancel</Button>\n                        <Button onClick={async () => await this.submitForm()} type=\"submit\" color=\"info\">Submit</Button>\n                    </ModalFooter>\n                </Modal>\n            </Form>\n        );\n    }\n\n    renderEditItemForm() {\n        return (\n            <EditItemForm\n                name={this.state.name}\n                notes={this.state.notes}\n                recurring={this.state.recurring}\n                handleNameTextChange={this.handleNameTextChange}\n                handleNotesTextChange={this.handleNotesTextChange}\n                handleRecurringCheckChange={this.handleRecurringCheckChange}\n            />\n        )\n    }\n\n    handleNameTextChange(event: ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            name: event.target.value\n        });\n    }\n\n    handleNotesTextChange(event: ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            notes: event.target.value\n        });\n    }\n\n    handleRecurringCheckChange(event: ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            recurring: event.target.checked\n        });\n        console.log(\"checked?\", event.target.checked);\n    }\n\n    async submitForm() {\n        await editItem(this.state);\n        this.props.submitEditItem(this.state.id as number);\n    }\n\n}\n","import React, {Component, Fragment} from \"react\";\nimport Item from \"../Item/Item\";\nimport {Table} from \"reactstrap\";\nimport ItemModel from \"../../../models/ItemModel\";\nimport EditItemModal from \"../Item/EditItemModal/EditItemModal\";\n\ninterface Props {\n    itemIds: Array<number>;\n    fetchNewAlerts: () => Promise<void>;\n}\n\ninterface State {\n    showEditItemModal: boolean;\n    itemToEdit: ItemModel | null;\n    editedItemId: number | null;\n    loading: boolean;\n}\n\nexport default class GroupBody extends Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            showEditItemModal: false,\n            itemToEdit: null,\n            editedItemId: null,\n            loading: true\n        };\n\n        this.showEditItemModal = this.showEditItemModal.bind(this);\n        this.toggleEditItemModal = this.toggleEditItemModal.bind(this);\n        this.submitEditItem = this.submitEditItem.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({loading: false});\n    }\n\n    render() {\n        return (\n            this.state.loading ? (\n                <p>Loading</p>\n            ) : (\n                <Fragment>\n                    <Table className=\"mb-0 same-width\" striped>\n                        <tbody>\n                        {this.props.itemIds.map(itemId => (\n                            <Item\n                                key={itemId}\n                                itemId={itemId}\n                                toggleEditItemModal={this.showEditItemModal}\n                                reRenderItem={this.state.editedItemId === itemId}\n                                resetEditedItemId={() => this.setState({editedItemId: null})}\n                            />\n                        ))}\n                        </tbody>\n                    </Table>\n                    {this.renderEditItemModal()}\n                </Fragment>\n            )\n        );\n    }\n\n    renderEditItemModal() {\n        if (this.state.showEditItemModal && this.state.itemToEdit !== null) {\n            return (\n                <EditItemModal\n                    showEditModal={this.state.showEditItemModal}\n                    closeEditModal={this.toggleEditItemModal}\n                    item={this.state.itemToEdit}\n                    submitEditItem={this.submitEditItem}\n                />\n            );\n        } else {\n            return <Fragment/>;\n        }\n    }\n\n    toggleEditItemModal() {\n        this.setState({showEditItemModal: !this.state.showEditItemModal});\n    }\n\n    showEditItemModal(item: ItemModel) {\n        this.setState({\n            itemToEdit: item,\n            showEditItemModal: true\n        });\n    }\n\n    async submitEditItem(itemId: number) {\n        this.setState({\n            editedItemId: itemId,\n            showEditItemModal: false\n        });\n        await this.props.fetchNewAlerts();\n    }\n}","import React, {Component, Fragment} from \"react\";\nimport GroupModel from \"../../../models/GroupModel\";\nimport {Card, CardBody, CardText} from \"reactstrap\";\nimport {getGroup, getGroupItemIds} from \"../../../api/groups\";\nimport GroupHeader from \"./GroupHeader\";\nimport GroupBody from \"./GroupBody\";\n\ninterface Props {\n    groupId: number;\n    fetchNewAlerts: () => Promise<void>;\n}\n\ninterface State extends GroupModel {\n    itemIds: Array<number>;\n    loading: boolean;\n}\n\nexport default class Group extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            id: null,\n            name: null,\n            notes: null,\n            itemIds: [],\n            loading: true\n        };\n    }\n\n    async componentDidMount() {\n        const group: GroupModel = await getGroup(this.props.groupId);\n        this.setState({\n            id: group.id,\n            name: group.name,\n            notes: group.notes\n        });\n        await this.getGroupItemIds();\n        await this.finishLoading();\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <Card className=\"space-between\">\n                    {this.state.loading ? (\n                        <CardBody>Loading group...</CardBody>\n                    ) : (\n                        <Fragment>\n                            <GroupHeader\n                                name={this.state.name as string}\n                                notes={this.state.notes as string}\n                            />\n                            <GroupBody\n                                itemIds={this.state.itemIds}\n                                fetchNewAlerts={this.props.fetchNewAlerts}\n                            />\n                        </Fragment>\n                    )}\n\n                </Card>\n            </Fragment>\n        )\n    }\n\n    async getGroupItemIds(): Promise<void> {\n        const groupItemIds = await getGroupItemIds(this.props.groupId);\n        this.setState({\n            itemIds: groupItemIds\n        });\n    }\n\n    async finishLoading(): Promise<void> {\n        this.setState({loading: false});\n    }\n}\n","import React, {Component} from \"react\";\nimport Heading from \"../Heading/Heading\";\nimport {\n    Card,\n    Row,\n    Col,\n    CardBody,\n    CardHeader,\n    ButtonDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem\n} from \"reactstrap\";\nimport Group from \"./Group/Group\";\nimport {getGroupIds} from \"../../api/groups\";\n\ninterface Props {\n    fetchNewAlerts: () => Promise<void>;\n}\n\ninterface State {\n    actionsDropdownOpen: boolean;\n    groupIds: Array<number>;\n    loading: boolean;\n}\n\n\nexport default class ShoppingList extends Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            actionsDropdownOpen: false,\n            groupIds: [],\n            loading: true\n        };\n    }\n\n    async componentDidMount() {\n        const groupIds = await getGroupIds();\n        this.setState({groupIds: groupIds});\n        this.setState({loading: false});\n    }\n\n    render() {\n        return (\n            <div>\n                <Heading title=\"Shopping List\">\n                    <ButtonDropdown isOpen={this.state.actionsDropdownOpen} toggle={() => this.toggleActionsMenu()}\n                                    size=\"sm\" color=\"info\">\n                        <DropdownToggle caret>\n                            Actions\n                        </DropdownToggle>\n                        <DropdownMenu right>\n                            <DropdownItem>Test</DropdownItem>\n                            <DropdownItem>Test</DropdownItem>\n                        </DropdownMenu>\n                    </ButtonDropdown>\n                </Heading>\n                <Row>\n                    <Col sm={12} lg={8}>\n                        {this.state.loading ? (\n                            <Card>\n                                <CardBody>\n                                    Loading groups...\n                                </CardBody>\n                            </Card>\n                        ) : (\n                            this.state.groupIds.map(groupId => (\n                                <Group\n                                    key={groupId}\n                                    groupId={groupId}\n                                    fetchNewAlerts={this.props.fetchNewAlerts}\n                                />\n                            ))\n                        )}\n                    </Col>\n                    <Col>\n                        <Card className=\"space-between mt-3 mt-lg-0\">\n                            <CardHeader>New Item</CardHeader>\n                            <CardBody>Form</CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n\n    toggleActionsMenu() {\n        this.setState({\n            actionsDropdownOpen: !this.state.actionsDropdownOpen\n        });\n    }\n}","import {Container, Row, Col} from \"reactstrap\";\nimport AlertPanel, {AlertPanelProps} from \"./components/AlertPanel/AlertPanel\";\nimport ShoppingList from \"./components/ShoppingList/ShoppingList\";\nimport React, {Component} from \"react\";\nimport {getAlerts} from \"./api/alerts\";\n\ninterface State {\n    alerts: Array<AlertPanelProps>;\n}\n\nclass App extends Component<any, State> {\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            alerts: []\n        };\n\n        this.fetchNewAlerts = this.fetchNewAlerts.bind(this);\n    }\n\n    async componentDidMount() {\n        await this.fetchNewAlerts();\n    }\n\n    async fetchNewAlerts() {\n        await this.getAlerts();\n    }\n\n    render() {\n        return (\n            <Container className={\"main-container pt-0\"}>\n                <Row>\n                    <Col>\n                        {this.state.alerts?.map(alert => (\n                            <AlertPanel color={alert.color} text={alert.text} key={alert.text}/>\n                        ))}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <ShoppingList\n                            fetchNewAlerts={this.fetchNewAlerts}\n                        />\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n\n    async getAlerts() {\n        const alerts = await getAlerts();\n        this.setState({alerts: alerts});\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./main.css\";\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}